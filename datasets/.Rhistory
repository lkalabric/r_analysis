View(dados_filtrados)
View(dados_filtrados)
# Carregando os dados .csv obtidos do Excel diretamente para uma data.frame em R devemos usar a função read.csv2 ao invés de read.csv...
# Carregando os dados de um arquivo .csv na pasta datasets
dados <- read.csv2("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/datasets/dados_curvaROC.csv")
View(dados)
View(dados)
# Filtrando os dados usando o operador %in%
dados_filtrados <- dados[dados$controle %in% c("1", "2"), ]
View(dados_filtrados)
View(dados_filtrados)
# calcula a curva ROC usando os dados fornecidos.
roc_curve <- roc(dados_filtrados$controle, dados_filtrados$a260_media)
# Calcular o valor AUC
auc_value <- auc(roc_curve)
View(roc_curve)
View(roc_curve)
# Instala os pacotes requeridos para o script
list.of.packages <- c("dplyr","pROC", "ggplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Carregando os dados .csv obtidos do Excel diretamente para uma data.frame em R devemos usar a função read.csv2 ao invés de read.csv...
# Carregando os dados de um arquivo .csv na pasta datasets
dados <- read.csv2("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/datasets/dados_curvaROC.csv")
# Carregar as bibliotecas necessárias
library(dplyr)
library(pROC)
View(dados)
View(dados)
# Transformar a coluna controle em um fator, definindo os níveis como "negativo" e "positivo".
dados_recodificado <- dados %>%
mutate(controle = recode(controle, "1" = "positivo", "2" = "negativo"))
View(dados_recodificado)
View(dados_recodificado)
# Filtrando os dados usando o operador %in%
dados_filtrados <- dados_recodificado[dados_recodificado$controle %in% c("1", "2"), ]
# calcula a curva ROC usando os dados fornecidos.
roc_curve <- roc(dados_filtrados$controle, dados_filtrados$a260_media)
# calcula a curva ROC usando os dados fornecidos.
roc_curve <- roc(dados_filtrados$controle, dados_filtrados$a260_media)
View(dados_filtrados)
# Filtrando os dados usando o operador %in%
dados_filtrados <- dados_recodificado[dados_recodificado$controle %in% c("positivo", "negativo"), ]
# calcula a curva ROC usando os dados fornecidos.
roc_curve <- roc(dados_filtrados$controle, dados_filtrados$a260_media)
a = 3
print(a)
a <- 3
print(a)
class(roc_curve)
View(roc_curve)
View(roc_curve)
# Calcular o valor AUC
auc_value <- auc(roc_curve)
print(paste("AUC: ", auc_value))
# plotar a curva ROC calculada.
plot(roc_curve, col = "blue", main = "Curva ROC para A260.media")
plot
# plotar a curva ROC calculada.
plot(roc_curve, col = "blue", main = "Curva ROC para A260.media")
legend("bottomright", legend = c("A260.media"), col = c("blue"), lwd = 2)
# Adicionar o valor da AUC ao gráfico
text(0.0, 0.75, paste("AUC =", round(auc_value, 2)), col = "blue")
# Carregar as bibliotecas necessárias
library(ggplot2)
# Criar um data frame com os dados fornecidos
#dados <- data.frame(
#  controle = c("positivo", "negativo", "positivo", "negativo",
"positivo", "negativo", "positivo", "negativo",
View(dados_filtrados)
View(dados_filtrados)
# Criar um data frame com os dados fornecidos
#dados <- data.frame(
#  controle = c("positivo", "negativo", "positivo", "negativo",
"positivo", "negativo", "positivo", "negativo",
View(dados_filtrados)
View(dados_filtrados)
# Criar um data frame com os dados fornecidos
#dados <- data.frame(
#  controle = c("positivo", "negativo", "positivo", "negativo",
"positivo", "negativo", "positivo", "negativo",
# Criar um data frame com os dados fornecidos
#dados <- data.frame(
#  controle = c("positivo", "negativo", "positivo", "negativo",
"positivo", "negativo", "positivo", "negativo",
# Criar um data frame com os dados fornecidos
#dados <- data.frame(
#  controle = c("positivo", "negativo", "positivo", "negativo",
"positivo", "negativo", "positivo", "negativo",
# Criar um data frame com os dados fornecidos
#dados <- data.frame(
#  controle = c("positivo", "negativo", "positivo", "negativo",
"positivo", "negativo", "positivo", "negativo",
# Criando um data frame de exemplo com dados faltantes
dados <- data.frame(
a = c(1, NA, 3, 4, NA),
b = c(NA, 2, 3, NA, 5)
)
# Filtrando os registros com dados faltantes em 'a' ou 'b'
dados_com_na <- dados[is.na(dados$a) | is.na(dados$b), ]
View(dados)
View(dados)
View(dados_com_na)
View(dados_com_na)
# Visualizando os resultados
print(dados_com_na)
dados <- data.frame(
a = c(1, NA, 3, 4, NA),
b = c(NA, 2, 3, NA, 5)
)
# Removendo os registros com dados faltantes em 'a' ou 'b'
dados_sem_na <- dados[complete.cases(dados), ]
View(dados_sem_na)
View(dados_sem_na)
View(dados_filtrados)
View(dados_filtrados)
# Removendo os registros com dados faltantes em 'a' ou 'b'
dados_sem_na <- dados_filtrados[complete.cases(dados_filtrados$a260_media), ]
View(dados_sem_na)
View(dados_sem_na)
# Removendo os registros com dados faltantes em 'a' ou 'b'
dados_sem_na <- dados_filtrados[complete.cases(dados_filtrados$a260_media) | (dados_filtrados$a260_a280_media), ]
View(dados_sem_na)
View(dados_sem_na)
# Removendo os registros com dados faltantes NA em 'a260_media' ou 'a260_a280_media'
dados_sem_na <- dados_filtrados[complete.cases(dados_filtrados$a260_media) | (dados_filtrados$a260_a280_media), ]
View(dados_sem_na)
View(dados_sem_na)
# Calcular as curvas ROC para a260_1 e a260_2
roc_a260_media <- roc(dados_sem_na$controle, dados_sem_na$a260_media, direction = "<")
roc_a260_a280_media <- roc(dados_sem_na$controle, dados_sem_na$a260_a280_media, direction = "<")
# Calcular os valores AUC
auc_a260_media <- auc(roc_a260_media)
auc_a260_a280_media <- auc(roc_a260_a280_media)
# Instala os pacotes requeridos para o script
list.of.packages <- c("dplyr","pROC", "ggplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Carregando os dados .csv obtidos do Excel diretamente para uma data.frame em R devemos usar a função read.csv2 ao invés de read.csv...
# Carregando os dados de um arquivo .csv na pasta datasets
dados <- read.csv2("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/datasets/dados_curvaROC.csv")
# Carregar as bibliotecas necessárias
library(dplyr)
library(pROC)
# Transformar a coluna controle em um fator, definindo os níveis como "negativo" e "positivo".
dados_recodificado <- dados %>%
mutate(controle = recode(controle, "1" = "positivo", "2" = "negativo"))
# Filtrando os dados usando o operador %in%
dados_filtrados <- dados_recodificado[dados_recodificado$controle %in% c("positivo", "negativo"), ]
# calcula a curva ROC usando os dados fornecidos.
roc_curve <- roc(dados_filtrados$controle, dados_filtrados$a260_media)
# Calcular o valor AUC
auc_value <- auc(roc_curve)
print(paste("AUC: ", auc_value))
# Removendo os registros com dados faltantes NA em 'a260_media' ou 'a260_a280_media'
dados_sem_na <- dados_filtrados[complete.cases(dados_filtrados$a260_media) | (dados_filtrados$a260_a280_media), ]
# Calcular as curvas ROC para a260_1 e a260_2
roc_a260_media <- roc(dados_sem_na$controle, dados_sem_na$a260_media, direction = "<")
# Calcular as curvas ROC para a260_1 e a260_2
roc_a260_media <- roc(dados_sem_na$controle, dados_sem_na$a260_media, direction = "<")
# Calcular os valores AUC
auc_a260_media <- auc(roc_a260_media)
print(paste("AUC: ", auc_a260_media))
print(paste("AUC: ", auc_value))
print(1-auc_a260_media)
# Preparar dados para ggplot2
df_roc_a260_media <- data.frame(
TPR = roc_a260_media$sensitivities,
FPR = 1 - roc_a260_media$specificities,
curva = "a260_media"
)
df_roc_a260_a280_media <- data.frame(
TPR = roc_a260_a280_media$sensitivities,
FPR = 1 - roc_a260_a280_media$specificities,
curva = "a260_a280_media"
)
roc_a260_a280_media <- roc(dados_sem_na$controle, dados_sem_na$a260_a280_media, direction = "<")
# Calcular os valores AUC
auc_a260_media <- auc(roc_a260_media)
print(paste("AUC: ", auc_a260_media))
auc_a260_a280_media <- auc(roc_a260_a280_media)
print(paste("AUC: ", auc_a260_a280_media))
# Preparar dados para ggplot2
df_roc_a260_media <- data.frame(
TPR = roc_a260_media$sensitivities,
FPR = 1 - roc_a260_media$specificities,
curva = "a260_media"
)
df_roc_a260_a280_media <- data.frame(
TPR = roc_a260_a280_media$sensitivities,
FPR = 1 - roc_a260_a280_media$specificities,
curva = "a260_a280_media"
)
# Combinar os data frames
df_roc <- rbind(df_roc_a260_media, df_roc_a260_a280_media)
# Plotar as curvas ROC usando ggplot2
ggplot() +
geom_line(data = df_roc_a260_media, aes(x = FPR, y = TPR, color = "a260_media"), linewidth = 1) +
geom_line(data = df_roc_a260_a280_media, aes(x = FPR, y = TPR, color = "a260_a280_media"), linewidth = 1) +
labs(title = "Curvas ROC para a260_media e a260_a280_media",
x = "Taxa de Falsos Positivos (1 - Especificidade)",
y = "Taxa de Verdadeiros Positivos (Sensibilidade)") +
theme_minimal() +
scale_color_manual(values = c("a260_media" = "blue", "a260_a280_media" = "red")) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "grey") +
annotate("text", x = 0.75, y = 0.25, label = paste("AUC a260_media =", round(auc_a260_media, 2)), color = "blue") +
annotate("text", x = 0.75, y = 0.20, label = paste("AUC a260_a280_media =", round(auc_a260_a280_media, 2)), color = "red")
roc_a260_media <- roc(dados_sem_na$controle, dados_sem_na$a260_media)
roc_a260_a280_media <- roc(dados_sem_na$controle, dados_sem_na$a260_a280_media)
# Calcular os valores AUC
auc_a260_media <- auc(roc_a260_media)
print(paste("AUC: ", auc_a260_media))
auc_a260_a280_media <- auc(roc_a260_a280_media)
print(paste("AUC: ", auc_a260_a280_media))
# Preparar dados para ggplot2
df_roc_a260_media <- data.frame(
TPR = roc_a260_media$sensitivities,
FPR = 1 - roc_a260_media$specificities,
curva = "a260_media"
)
df_roc_a260_a280_media <- data.frame(
TPR = roc_a260_a280_media$sensitivities,
FPR = 1 - roc_a260_a280_media$specificities,
curva = "a260_a280_media"
)
# Combinar os data frames
df_roc <- rbind(df_roc_a260_media, df_roc_a260_a280_media)
# Plotar as curvas ROC usando ggplot2
ggplot() +
geom_line(data = df_roc_a260_media, aes(x = FPR, y = TPR, color = "a260_media"), linewidth = 1) +
geom_line(data = df_roc_a260_a280_media, aes(x = FPR, y = TPR, color = "a260_a280_media"), linewidth = 1) +
labs(title = "Curvas ROC para a260_media e a260_a280_media",
x = "Taxa de Falsos Positivos (1 - Especificidade)",
y = "Taxa de Verdadeiros Positivos (Sensibilidade)") +
theme_minimal() +
scale_color_manual(values = c("a260_media" = "blue", "a260_a280_media" = "red")) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "grey") +
annotate("text", x = 0.75, y = 0.25, label = paste("AUC a260_media =", round(auc_a260_media, 2)), color = "blue") +
annotate("text", x = 0.75, y = 0.20, label = paste("AUC a260_a280_media =", round(auc_a260_a280_media, 2)), color = "red")
# Instala os pacotes requeridos para o script
list.of.packages <- c("dplyr","pROC", "ggplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Carregando os dados .csv obtidos do Excel diretamente para uma data.frame em R devemos usar a função read.csv2 ao invés de read.csv...
# Carregando os dados de um arquivo .csv na pasta datasets
dados <- read.csv2("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/datasets/dados_curvaROC.csv")
# Para confirmar a classe de uma variável
View(dados)
class(dados)
# Carregar as bibliotecas necessárias
library(dplyr)
library(pROC)
# Transformar a coluna controle em um fator, definindo os níveis como "negativo" e "positivo".
dados_recodificado <- dados %>%
mutate(controle = recode(controle, "1" = "positivo", "2" = "negativo"))
# Filtrando os dados usando o operador %in%
dados_filtrados <- dados_recodificado[dados_recodificado$controle %in% c("positivo", "negativo"), ]
# Removendo os registros com dados faltantes NA em 'a260_media' ou 'a260_a280_media'
dados_sem_na <- dados_filtrados[complete.cases(dados_filtrados$a260_media) | (dados_filtrados$a260_a280_media), ]
# calcula a curva ROC usando os dados fornecidos.
roc_curve <- roc(dados_sem_na$controle, dados_sem_na$a260_media)
# Calcular o valor AUC
auc_value <- auc(roc_curve)
print(paste("AUC: ", auc_value))
# plotar a curva ROC calculada.
plot(roc_curve, col = "blue", main = "Curva ROC para A260.media")
legend("bottomright", legend = c("A260.media"), col = c("blue"), lwd = 2)
# Adicionar o valor da AUC ao gráfico
text(0.0, 0.75, paste("AUC =", round(auc_value, 2)), col = "blue")
# Analisando e plotando dois dados simultaneamente
# Carregar as bibliotecas necessárias
library(ggplot2)
# Calcular as curvas ROC para a260_1 e a260_2
roc_a260_media <- roc(dados_sem_na$controle, dados_sem_na$a260_media, direction = "<")
# Calcular as curvas ROC para a260_1 e a260_2
roc_a260_media <- roc(dados_sem_na$controle, dados_sem_na$a260_media, direction = "<")
roc_a260_a280_media <- roc(dados_sem_na$controle, dados_sem_na$a260_a280_media, direction = "<")
roc_a260_media <- roc(dados_sem_na$controle, dados_sem_na$a260_media)
# Calcular as curvas ROC para a260_1 e a260_2
roc_a260_media <- roc(dados_sem_na$controle, dados_sem_na$a260_media)
roc_a260_a280_media <- roc(dados_sem_na$controle, dados_sem_na$a260_a280_media)
# Calcular os valores AUC
auc_a260_media <- auc(roc_a260_media)
print(paste("AUC: ", auc_a260_media))
auc_a260_a280_media <- auc(roc_a260_a280_media)
print(paste("AUC: ", auc_a260_a280_media))
# Preparar dados para ggplot2
df_roc_a260_media <- data.frame(
TPR = roc_a260_media$sensitivities,
FPR = 1 - roc_a260_media$specificities,
curva = "a260_media"
)
df_roc_a260_a280_media <- data.frame(
TPR = roc_a260_a280_media$sensitivities,
FPR = 1 - roc_a260_a280_media$specificities,
curva = "a260_a280_media"
)
# Combinar os data frames
df_roc <- rbind(df_roc_a260_media, df_roc_a260_a280_media)
# Plotar as curvas ROC usando ggplot2
ggplot() +
geom_line(data = df_roc_a260_media, aes(x = FPR, y = TPR, color = "a260_media"), linewidth = 1) +
geom_line(data = df_roc_a260_a280_media, aes(x = FPR, y = TPR, color = "a260_a280_media"), linewidth = 1) +
labs(title = "Curvas ROC para a260_media e a260_a280_media",
x = "Taxa de Falsos Positivos (1 - Especificidade)",
y = "Taxa de Verdadeiros Positivos (Sensibilidade)") +
theme_minimal() +
scale_color_manual(values = c("a260_media" = "blue", "a260_a280_media" = "red")) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "grey") +
annotate("text", x = 0.75, y = 0.25, label = paste("AUC a260_media =", round(auc_a260_media, 2)), color = "blue") +
annotate("text", x = 0.75, y = 0.20, label = paste("AUC a260_a280_media =", round(auc_a260_a280_media, 2)), color = "red")
# Plotar as curvas ROC usando ggplot2
ggplot() +
geom_line(data = df_roc_a260_media, aes(x = FPR, y = TPR, color = "Pureza DNA"), linewidth = 1) +
geom_line(data = df_roc_a260_a280_media, aes(x = FPR, y = TPR, color = "a260_a280_media"), linewidth = 1) +
labs(title = "Curvas ROC para a260_media e a260_a280_media",
x = "Taxa de Falsos Positivos (1 - Especificidade)",
y = "Taxa de Verdadeiros Positivos (Sensibilidade)") +
theme_minimal() +
scale_color_manual(values = c("a260_media" = "blue", "a260_a280_media" = "red")) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "grey") +
annotate("text", x = 0.75, y = 0.25, label = paste("AUC a260_media =", round(auc_a260_media, 2)), color = "blue") +
annotate("text", x = 0.75, y = 0.20, label = paste("AUC a260_a280_media =", round(auc_a260_a280_media, 2)), color = "red")
# Plotar as curvas ROC usando ggplot2
ggplot() +
geom_line(data = df_roc_a260_media, aes(x = FPR, y = TPR, color = "a260_media"), linewidth = 1) +
geom_line(data = df_roc_a260_a280_media, aes(x = FPR, y = TPR, color = "a260_a280_media"), linewidth = 1) +
labs(title = "Curvas ROC para a260_media e a260_a280_media",
x = "Taxa de Falsos Positivos (1 - Especificidade)",
y = "Taxa de Verdadeiros Positivos (Sensibilidade)") +
theme_minimal() +
scale_color_manual(values = c("Pureza DNA" = "blue", "a260_a280_media" = "red")) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "grey") +
annotate("text", x = 0.75, y = 0.25, label = paste("AUC a260_media =", round(auc_a260_media, 2)), color = "blue") +
annotate("text", x = 0.75, y = 0.20, label = paste("AUC a260_a280_media =", round(auc_a260_a280_media, 2)), color = "red")
# Plotar as curvas ROC usando ggplot2
ggplot() +
geom_line(data = df_roc_a260_media, aes(x = FPR, y = TPR, color = "a260_media"), linewidth = 1) +
geom_line(data = df_roc_a260_a280_media, aes(x = FPR, y = TPR, color = "a260_a280_media"), linewidth = 1) +
labs(title = "Curvas ROC para a260_media e a260_a280_media",
x = "Taxa de Falsos Positivos (1 - Especificidade)",
y = "Taxa de Verdadeiros Positivos (Sensibilidade)") +
theme_minimal() +
scale_color_manual(values = c("a260_media" = "blue", "a260_a280_media" = "red")) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "grey") +
annotate("text", x = 0.75, y = 0.25, label = paste("AUC a260_media =", round(auc_a260_media, 2)), color = "blue") +
annotate("text", x = 0.75, y = 0.20, label = paste("AUC a260_a280_media =", round(auc_a260_a280_media, 2)), color = "red")
knitr::opts_chunk$set(echo = TRUE)
# Instala os pacotes requeridos para o script
list.of.packages <- c("dplyr", "gtsummary")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Carregando os dados de um arquivo .csv na Fiocruz
dados <- read.csv("C:/Users/luciano.kalabric/OneDrive - FIOCRUZ/GitHub/r_analysis/datasets/tabela1_MP.csv")
# Carregando os dados de um arquivo .csv na Fiocruz
#dados <- read.csv("C:/Users/luciano.kalabric/OneDrive - FIOCRUZ/GitHub/r_analysis/datasets/tabela1_MP.csv")
# Carregando os dados de um arquivo .csv no laptop ASUS
dados <- read.csv("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/datasets/tabela1_MP.csv")
# Para confirmar a classe de uma variável
View(dados)
class(dados)
#Carrega o pacote gtsummary
library(dplyr)
# Recodificando os valores dos dados da data.frame
dados_recodificado <- dados %>%
mutate(sexo = recode(sexo, "1" = "Masculino", "2" = "Feminino"))
dados_recodificado <- dados_recodificado %>%
mutate(nat1 = recode(nat1, "1" = "Salvador", "2" = "Outras localidades"))
View(dados_recodificado)
View(dados_recodificado)
#Carrega o pacote gtsummary
library(gtsummary)
# Tabela corrigida
tbl_summary(dados_recodificado,
label = list(sexo ~ "Sexo",
idade ~ "Idade",
nat1 ~ "Naturalidade",
cor ~ "Cor da pele",
escolaridade ~ "Escolaridade"),
statistic = list(idade ~ "{mean} ({sd})"),
digits = list(idade ~ c(1,2)),
# no - nunca mostra; always - sempre mostra e ifany - mostra se tiver
missing = "no",
sort = list(sexo ~ "frequency")) %>%
bold_labels() %>%
italicize_levels()
# Tabela corrigida
tbl_summary(dados_recodificado,
label = list(id ~ "Total",
sexo ~ "Sexo",
idade ~ "Idade",
nat1 ~ "Naturalidade",
cor ~ "Cor da pele",
escolaridade ~ "Escolaridade"),
statistic = list(idade ~ "{mean} ({sd})"),
digits = list(idade ~ c(1,2)),
# no - nunca mostra; always - sempre mostra e ifany - mostra se tiver
missing = "no",
sort = list(sexo ~ "frequency")) %>%
bold_labels() %>%
italicize_levels()
library(bibliometrix)   ### load bibliometrix package
install.packages("bibliometrix")
library(bibliometrix)   ### load bibliometrix package
file <- "https://www.bibliometrix.org/datasets/savedrecs.bib"
M <- convert2df(file = file, dbsource = "isi", format = "bibtex")
results <- biblioAnalysis(M, sep = ";")
options(width=100)
S <- summary(object = results, k = 10, pause = FALSE)
install.packages("remotes")
install.packages("remotes")
remotes::install_github("massimoaria/bibliometrix")
file <- "https://www.bibliometrix.org/datasets/savedrecs.bib"
M <- convert2df(file = file, dbsource = "isi", format = "bibtex")
results <- biblioAnalysis(M, sep = ";")
options(width=100)
S <- summary(object = results, k = 10, pause = FALSE)
View(M)
View(M)
View(results)
View(results)
install.packages("bibliometrix")
library(bibliometrix)   ### load bibliometrix package
install.packages("remotes")
remotes::install_github("massimoaria/bibliometrix")
file <- "https://www.bibliometrix.org/datasets/savedrecs.bib"
M <- convert2df(file = file, dbsource = "isi", format = "bibtex")
View(M)
View(M)
results <- biblioAnalysis(M, sep = ";")
View(results)
options(width=100)
S <- summary(object = results, k = 10, pause = FALSE)
plot(x = results, k = 10, pause = FALSE)
# Análise das citações
citations(M, field = "article", sep = ";")
M$CR
# Análise das citações
CR <- citations(M, field = "article", sep = ";")
cbind(CR$Cited[1:10]) # Dez manuscritos mais citados
CR <- citations(M, field = "author", sep = ";")
cbind(CR$Cited[1:10]) # Dez autores mais citados
CR <- localCitations(M, sep = ";")
CR$Authors[1:10,]
CR$Papers[1:10,]
# Ranking de dominância dos autores
DF <- dominance(results, k = 10)
DF
#Indice H dos autores
indices <- Hindex(M, field = "author", elements="BORNMANN L", sep = ";", years = 10)
# Bornmann's impact indices:
indices$H
# Bornmann's citations
indices$CitationList
View(indices)
View(indices)
#Indice H dos autores
indices <- Hindex(M, field = "author", elements="KOSTOFF RN", sep = ";", years = 10)
# Kostoff's impact indices:
indices$H
# Kostoff's citations
indices$CitationList
# Calculo do indice-H dos dez autores mais produtivos
authors=gsub(","," ",names(results$Authors)[1:10])
indices <- Hindex(M, field = "author", elements=authors, sep = ";", years = 50)
indices$H
#Indice H dos autores
indices <- Hindex(M, field = "author", elements="KOSTOFF RN", sep = ";", years = 10)
# Bornmann's impact indices:
indices$H
# Bornmann's citations
indices$CitationList
## Table: Author's productivity per year
head(topAU$dfAU)
# Produtividade dos autores no tempo
topAU <- authorProdOverTime(M, k = 10, graph = TRUE)
## Table: Author's productivity per year
head(topAU$dfAU)
## Table: Auhtor's documents list
head(topAU$dfPapersAU)
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/datasets")
file1 <- "LKS_savedrecs.bib"
file <- "LKS_savedrecs.bib"
M <- convert2df(file = file, dbsource = "isi", format = "bibtex")
file <- "LKS_savedrecs.bib"
M <- convert2df(file = file, dbsource = "isi", format = "bibtex")
results <- biblioAnalysis(M, sep = ";")
options(width=100)
S <- summary(object = results, k = 10, pause = FALSE)
plot(x = results, k = 10, pause = FALSE)
# Análise das citações
CR <- citations(M, field = "article", sep = ";")
cbind(CR$Cited[1:10]) # Dez manuscritos mais citados
CR <- citations(M, field = "author", sep = ";")
cbind(CR$Cited[1:10]) # Dez autores mais citados
CR <- localCitations(M, sep = ";")
CR$Authors[1:10,] # Dez autores com mais citações localmente (auto-citações)
CR$Papers[1:10,]
#Indice H dos autores
indices <- Hindex(M, field = "author", elements="BORNMANN L", sep = ";", years = 10)
# Bornmann's impact indices:
indices$H
# Bornmann's citations
indices$CitationList
#Indice H dos autores
indices <- Hindex(M, field = "author", elements="BLANTON RE", sep = ";", years = 10)
# Bornmann's impact indices:
indices$H
# Bornmann's citations
indices$CitationList
# Calculo do indice-H dos dez autores mais produtivos
authors=gsub(","," ",names(results$Authors)[1:10])
