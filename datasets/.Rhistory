list.of.packages <- c("RCurl")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Carregar as bilbiotecas requeridas
library(RCurl)
# Dados de acesso do projeto
api_token       <- '39169DDCCC39AED2489284B828E0A65A'
api_url         <- 'https://bdp.bahia.fiocruz.br/api/'
# Baixando dados a partir de um report de um projeto no REDCap
library(RCurl)
# Replace placeholders with your actual values
url <- "https://bdp.bahia.fiocruz.br/api/"
token <- "39169DDCCC39AED2489284B828E0A65A"
report_id <- "Tabela 1. Características dos participantes"
format <- "csv"
params <- list(
token = token,
content = "report",
report_id = report_id,
format = format
)
response <- getForm(url, .params = params)
# Define a variável soma
s <- 10
# Definindo a variável a que corresponde ao numero de algarismos de um numero inteiro j
a <- 2
print(paste("Soma:", s, "Numero de algaritimos: ", a))
# Possiveis algarismos
algarismos <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
# Lista de solucoes
solucoes <- c()
# Loop para criar um numero minimo formado por "a" algarismos que nao se repetem
for (j in 1:a) {
j_min <- j_min + algarismos[j]*10^(a-j)
}
print(j_min)
j_min <- 0
# Loop para criar um numero minimo formado por "a" algarismos que nao se repetem
for (j in 1:a) {
j_min <- j_min + algarismos[j]*10^(a-j)
}
# Definindo a variável a que corresponde ao numero de algarismos de um numero inteiro j
a <- 4
print(paste("Soma:", s, "Numero de algaritimos: ", a))
# Possiveis algarismos
algarismos <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
# Lista de solucoes
solucoes <- c()
j_min <- 0
# Loop para criar um numero minimo formado por "a" algarismos que nao se repetem
for (j in 1:a) {
j_min <- j_min + algarismos[j]*10^(a-j)
}
#j_min <- 0
# Loop para criar um numero minimo formado por "a" algarismos que nao se repetem
#for (j in 1:a) {
#    j_min <- j_min + algarismos[j]*10^(a-j)
#}
j_min <- algarismos[1:4]
print(j_min)
#j_max<-0
# Loop para criar um numero maximo formado por "a" algarismos que nao se repetem
#for (j in 1:a) {
#  j_max <- j_max + algarismos[length(algarismos)+1-j]*10^(a-j)
#}
j_max <- rev(algarismos[(length(algarismos) - 3):length(algarismos)])
print(j_max)
n_solucoes <- 0
# Define a variável soma
s <- 10
# Define a variável soma
s <- 10
# Definindo a variável a que corresponde ao numero de algarismos de um numero inteiro j
a <- 2
a <- 5
# Definindo a variável a que corresponde ao numero de algarismos de um numero inteiro j
a <- 2
print(paste("Soma:", s, "Numero de algaritimos: ", a))
# Possiveis algarismos
algarismos <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
# Lista de solucoes
solucoes <- c()
# Definição do universo amostral
j_min <- algarismos[1:4]
# Definição do universo amostral
j_min <- algarismos[1:a]
j_max <- rev(algarismos[(length(algarismos) - a -1):length(algarismos)])
j_max <- rev(algarismos[(length(algarismos) - a -1):length(algarismos)])
# Definindo a variável a que corresponde ao numero de algarismos de um numero inteiro j
a <- 2
print(paste("Soma:", s, "Numero de algaritimos: ", a))
# Possiveis algarismos
algarismos <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
# Lista de solucoes
solucoes <- c()
# Definição do universo amostral
j_min <- algarismos[1:a]
print(j_min)
j_max <- rev(algarismos[(length(algarismos) - a -1):length(algarismos)])
j_max <- rev(algarismos[(length(algarismos)-a-1):length(algarismos)])
print(j_max)
j_max <- rev(algarismos[(length(algarismos)-(a-1))length(algarismos)])
j_max <- rev(algarismos[(length(algarismos)-(a-1))length(algarismos)])
j_max <- rev(algarismos[(length(algarismos)-(a-1)):length(algarismos)])
print(j_max)
n_solucoes <- 0
# Loop para testar se a soma dos algarismos de um numero j correspondem a s
for (i in j_min:j_max) {
# Convertendo o número para uma string e depois para uma lista de caracteres
j_str <- as.character(i)
j_list_char <- strsplit(j_str, "")[[1]]
# Convertendo a lista de caracteres para uma lista de números inteiros
j_list_num <- as.integer(j_list_char)
# Verificando se "0" está presente na lista
tem_zero <- any(j_list_num == 0)
# Imprimindo o resultado dos numeros validos
if (tem_zero) {
next
} else {
# Removendo elementos duplicados e comparando os comprimentos
algarismos_repetidos <- length(j_list_char) != length(unique(j_list_char))
if (algarismos_repetidos) {
next
} else {
# Calculando a soma dos elementos
soma_total <- sum(j_list_num)
if (s == soma_total) {
solucao_ordenada <- sort(j_list_num)
# Convertendo a lista em uma string, separando cada elemento por ""
string_numeros <- paste(solucao_ordenada, collapse = "")
# Convertendo a string em um número inteiro
numero_final <- as.numeric(string_numeros)
solucoes <- c(solucoes, numero_final)
# Removendo elementos duplicados e comparando os comprimentos
solucao_repetida <- length(solucoes) != length(unique(solucoes))
if (solucao_repetida) {
solucoes <- unique(solucoes)
next
} else {
n_solucoes <- n_solucoes + 1
# Imprimindo a lista final
print(paste("Solucao: ", n_solucoes))
# Imprimindo a lista final
print ("Algarismos do numero: ")
print(j_list_num)
}
}
}
}
}
n_solucoes <- 0
# Loop para testar se a soma dos algarismos de um numero j correspondem a s
for (i in j_min:j_max) {
# Convertendo o número para uma string e depois para uma lista de caracteres
j_str <- as.character(i)
j_list_char <- strsplit(j_str, "")[[1]]
# Convertendo a lista de caracteres para uma lista de números inteiros
j_list_num <- as.integer(j_list_char)
# Verificando se "0" está presente na lista
tem_zero <- any(j_list_num == 0)
# Imprimindo o resultado dos numeros validos
if (tem_zero) {
next
} else {
# Removendo elementos duplicados e comparando os comprimentos
algarismos_repetidos <- length(j_list_char) != length(unique(j_list_char))
if (algarismos_repetidos) {
next
} else {
# Calculando a soma dos elementos
soma_total <- sum(j_list_num)
if (s == soma_total) {
solucao_ordenada <- sort(j_list_num)
# Convertendo a lista em uma string, separando cada elemento por ""
string_numeros <- paste(solucao_ordenada, collapse = "")
# Convertendo a string em um número inteiro
numero_final <- as.numeric(string_numeros)
solucoes <- c(solucoes, numero_final)
# Removendo elementos duplicados e comparando os comprimentos
solucao_repetida <- length(solucoes) != length(unique(solucoes))
if (solucao_repetida) {
solucoes <- unique(solucoes)
next
} else {
n_solucoes <- n_solucoes + 1
# Imprimindo a lista final
print(paste("Solucao: ", n_solucoes))
# Imprimindo a lista final
print ("Algarismos do numero: ")
print(j_list_num)
}
}
}
}
}
# Define a variavel soma
s <- 10
# Definindo a variável a que corresponde ao numero de algarismos de um numero inteiro j
a <- 2
print(paste("Soma:", s, "Numero de algaritimos: ", a))
# Possiveis algarismos
algarismos <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
# Lista de solucoes
solucoes <- c()
j_min <- 0
# Loop para criar um numero minimo formado por "a" algarismos que nao se repetem
for (j in 1:a) {
j_min <- j_min + algarismos[j]*10^(a-j)
}
print(j_min)
j_max<-0
# Loop para criar um numero maximo formado por "a" algarismos que nao se repetem
for (j in 1:a) {
j_max <- j_max + algarismos[length(algarismos)+1-j]*10^(a-j)
}
print(j_max)
n_solucoes <- 0
# Loop para testar se a soma dos algarismos de um numero j correspondem a s
for (i in j_min:j_max) {
# Convertendo o número para uma string e depois para uma lista de caracteres
j_str <- as.character(i)
j_list_char <- strsplit(j_str, "")[[1]]
# Convertendo a lista de caracteres para uma lista de números inteiros
j_list_num <- as.integer(j_list_char)
# Verificando se "0" está presente na lista
tem_zero <- any(j_list_num == 0)
# Imprimindo o resultado dos numeros validos
if (tem_zero) {
next
} else {
# Removendo elementos duplicados e comparando os comprimentos
algarismos_repetidos <- length(j_list_char) != length(unique(j_list_char))
if (algarismos_repetidos) {
next
} else {
# Calculando a soma dos elementos
soma_total <- sum(j_list_num)
if (s == soma_total) {
solucao_ordenada <- sort(j_list_num)
# Convertendo a lista em uma string, separando cada elemento por ""
string_numeros <- paste(solucao_ordenada, collapse = "")
# Convertendo a string em um número inteiro
numero_final <- as.numeric(string_numeros)
solucoes <- c(solucoes, numero_final)
# Removendo elementos duplicados e comparando os comprimentos
solucao_repetida <- length(solucoes) != length(unique(solucoes))
if (solucao_repetida) {
solucoes <- unique(solucoes)
next
} else {
n_solucoes <- n_solucoes + 1
# Imprimindo a lista final
print(paste("Solucao: ", n_solucoes))
# Imprimindo a lista final
print ("Algarismos do numero: ")
print(j_list_num)
}
}
}
}
}
# Definição do universo amostral
j_min <- algarismos[1:a]
j_min <- as.integer(j_min)
print(j_min)
# Definição do universo amostral
j_min <- algarismos[1:a]
# Colapsando as strings em uma única string
j_min <- paste(j_min, collapse = "")
# Convertendo a string de volta para um número
j_min <- as.numeric(j_min)
j_max <- rev(algarismos[(length(algarismos)-(a-1)):length(algarismos)]) # Seleciona os "a" últimos elementos do vetor algarismos
j_max <- paste(j_min, collapse = "")  # Colapsando as strings em uma única string
j_max <- as.numeric(j_min)            # Convertendo a string de volta para um número
print(j_min)
# Define a variável soma
s <- 10
# Definindo a variável a que corresponde ao numero de algarismos de um numero inteiro j
a <- 2
print(paste("Soma:", s, "Numero de algarismos: ", a))
# Possiveis algarismos
algarismos <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
# Lista de solucoes
solucoes <- c()
# Definição do universo amostral
j_min <- algarismos[1:a]              # Seleciona os "a" primeiros elementos do vetor algarismos
j_min <- paste(j_min, collapse = "")  # Colapsando as strings em uma única string
j_min <- as.numeric(j_min)            # Convertendo a string de volta para um número
print(j_min)
j_max <- rev(algarismos[(length(algarismos)-(a-1)):length(algarismos)]) # Seleciona os "a" últimos elementos do vetor algarismos
j_max <- paste(j_max, collapse = "")  # Colapsando as strings em uma única string
j_max <- as.numeric(j_max)            # Convertendo a string de volta para um número
print(j_max)
print(j_max)
n_solucoes <- 0
# Loop para testar se a soma dos algarismos de um numero j correspondem a s
for (i in j_min:j_max) {
# Convertendo o número para uma string e depois para uma lista de caracteres
j_str <- as.character(i)
j_list_char <- strsplit(j_str, "")[[1]]
# Convertendo a lista de caracteres para uma lista de números inteiros
j_list_num <- as.integer(j_list_char)
# Verificando se "0" está presente na lista
tem_zero <- any(j_list_num == 0)
# Imprimindo o resultado dos numeros validos
if (tem_zero) {
next
} else {
# Removendo elementos duplicados e comparando os comprimentos
algarismos_repetidos <- length(j_list_char) != length(unique(j_list_char))
if (algarismos_repetidos) {
next
} else {
# Calculando a soma dos elementos
soma_total <- sum(j_list_num)
if (s == soma_total) {
solucao_ordenada <- sort(j_list_num)
# Convertendo a lista em uma string, separando cada elemento por ""
string_numeros <- paste(solucao_ordenada, collapse = "")
# Convertendo a string em um número inteiro
numero_final <- as.numeric(string_numeros)
solucoes <- c(solucoes, numero_final)
# Removendo elementos duplicados e comparando os comprimentos
solucao_repetida <- length(solucoes) != length(unique(solucoes))
if (solucao_repetida) {
solucoes <- unique(solucoes)
next
} else {
n_solucoes <- n_solucoes + 1
# Imprimindo a lista final
print(paste("Solucao: ", n_solucoes))
# Imprimindo a lista final
print ("Algarismos do numero: ")
print(j_list_num)
}
}
}
}
}
pressure
plot(pressure)
#Pacotes e datasets ----
# Preparação do ambiente
list.of.packages <- c("tidyverse", "ggplot2", "dplyr", "ggpubr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(ggpubr)
#Defini??o de diret?rio de trabalho----
getwd()
#setwd("G:\\Meu Drive\\Inicia??o Cient?fica Mitermayer\\KAP\\Bancos de dados")
#setwd("C:\\Users\\kalabric\\Downloads")
#setwd("C:\\Users\\kalabric\\OneDrive - FIOCRUZ\\Projetos\\2019 Kalabric & Camila - Schisto Pirajá\\Produção\\2023 Educação")
#setwd("C:/Users/kalabric/Documents/GitHub/r_analysis/datasets")
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/datasets")
View(df.cap)
#Avaliando a estrutura do dataset
str(df.cap)
#Transformando algumas vari?veis categ?ricas em fatores
cols <- c("sexo", "nat1", "esc")
df.cap[cols] <- lapply(df.cap[cols], as.factor)
str(df.cap)
# Modificando os nomes de alguns fatores
levels(df.cap$sexo) <- c("Homem", "Mulher")
levels(df.cap$nat1) <- c("Salvador", "Outro")
levels(df.cap$esc) <- c("Analfabeto/Fund1_incompleto", "Fund1_completo", "Fund2_completo", "Med_completo", "Sup_completo")
summary(df.cap)
# Carregando os dados do desktop Fiocruz
setwd("C:/Users/luciano.kalabric/OneDrive - FIOCRUZ/GitHub/r_analysis/datasets")
#An?lise explorat?ria dos dados----
df.cap <- read.csv(file="pre_pos.csv")
View(df.cap)
#Avaliando a estrutura do dataset
str(df.cap)
#Transformando algumas vari?veis categ?ricas em fatores
cols <- c("sexo", "nat1", "esc")
df.cap[cols] <- lapply(df.cap[cols], as.factor)
str(df.cap)
# Modificando os nomes de alguns fatores
levels(df.cap$sexo) <- c("Homem", "Mulher")
levels(df.cap$nat1) <- c("Salvador", "Outro")
levels(df.cap$esc) <- c("Analfabeto/Fund1_incompleto", "Fund1_completo", "Fund2_completo", "Med_completo", "Sup_completo")
summary(df.cap)
sd(sub.df.cap$Idade)
## Exibir a tabela
## Link: https://www.statology.org/str-function-in-r/
str(df.cap)
## Grafico pareado sem estratifica??o
ggpaired(df.cap,cond1= "pre_total", cond2= "pos_total",ylab= "Resultado no question?rio CAP", xlab= "Momento de aplica??o", title= "Desempenho no question?rio CAP",fill= "condition",
line.color = "red",line.size= 0.4,palette="jco")
## Gr?fico pareados por sexo
ggpaired(df.cap,cond1= "pre_total", cond2= "pos_total",ylab= "Resultado no question?rio CAP", xlab= "Momento de aplica??o", title= "Desempenho no question?rio CAP",fill= "condition",
line.color = "red",line.size= 0.4,palette="jco") + facet_wrap(~ sexo)
## Gr?fico pareados por esc
ggpaired(df.cap,cond1= "pre_total", cond2= "pos_total",ylab= "Resultado no question?rio CAP", xlab= "Momento de aplica??o", title= "Desempenho no question?rio CAP",fill= "condition",
line.color = "red",line.size= 0.4,palette="jco") + facet_wrap(~ esc)
# Configurando o diretório de trabalho
setwd("C:/Users/luciano.kalabric/OneDrive - FIOCRUZ/GitHub/r_analysis/datasets")
# Instalando bibliotecas necessários
list.of.packages <- c("ggplot2", "tidyverse", "dplyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Carregando bibliotecas necessários
library(tidyverse)
library(ggplot2)
library(dplyr)
# 1. Ler o arquivo CSV
dados <- read.csv("Figura 2 - All.csv")
# 2. Recodifica "idade" por faixas etárias de 10 em 10 anos e estratifica o dado por "study"
dados <- dados %>%
mutate(
faixa_etaria = case_when(
idade <= 10 ~ " 2-10",
idade <= 20 ~ "11-20",
idade <= 30 ~ "21-30",
idade <= 40 ~ "31-40",
idade <= 50 ~ "41-50",
idade <= 60 ~ "51-60",
idade <= 70 ~ "61-70",
TRUE ~ "70+"
)
)
# 3. Plotar a pirâmide etária geral
ggplot(dados, aes(x = faixa_etaria, fill = factor(sexo))) +
coord_flip() +
geom_bar(data = subset(dados, sexo == 1), aes(y = ..count..), stat = "count") +
geom_bar(data = subset(dados, sexo == 2), aes(y = -..count..), stat = "count") +
#facet_wrap(~ study) +
scale_fill_manual(values = c("1" = "blue", "2" = "red"),
labels = c("Male", "Female")) +
labs(x = "Age group", y = "Frequency", fill = "Sex") +
theme_minimal()
# 3.1 Plotar a pirâmide etária para cada estudo
ggplot(dados, aes(x = faixa_etaria, fill = factor(sexo))) +
coord_flip() +
geom_bar(data = subset(dados, sexo == 1), aes(y = ..count..), stat = "count") +
geom_bar(data = subset(dados, sexo == 2), aes(y = -..count..), stat = "count") +
scale_fill_manual(values = c("1" = "blue", "2" = "red"),
labels = c("Male", "Female")) +
labs(x = "Age group", y = "Frequency", fill = "Sex") +
facet_wrap(~ study) +
theme_minimal()
# 4. Calcula a prevalência por faixa etária
prevalencia_por_idade <- dados %>%
group_by(faixa_etaria) %>%
summarise(
total = n(),
sm = sum(sm_prev == 1),
proporcao = round((sm * 100 / total), digits = 1)
)
# 4.1 Plotar a pirâmide etária para cada estudo
ggplot(prevalencia_por_idade, aes(x = faixa_etaria, y = proporcao)) +
coord_flip() +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(y = proporcao, label = proporcao), vjust = 0.5, hjust = 1.3) +
labs(x = "Age group", y = "SM Prevalence (%)") +
theme_minimal()
# 5. Calcula a prevalência por sexo e faixa etária
prevalencia_por_sexo_idade <- dados %>%
group_by(sexo, faixa_etaria) %>%
summarise(
total = n(),
sm = sum(sm_prev == 1),
proporcao = round((sm * 100 / total), digits = 1)
)
# 5.1 Plotar a prevalência por sexo e faixa etária
ggplot(prevalencia_por_sexo_idade, aes(x = faixa_etaria, y = proporcao, fill = factor(sexo))) +
coord_flip() +
geom_bar(data = subset(prevalencia_por_sexo_idade, sexo == 1), aes(y = proporcao), stat = "identity", position = "dodge") +
geom_text(data = subset(prevalencia_por_sexo_idade, sexo == 1), aes(y = proporcao, label = proporcao), vjust = 0.5, hjust = -0.1) +
geom_bar(data = subset(prevalencia_por_sexo_idade, sexo == 2), aes(y = -proporcao), stat = "identity", position = "dodge") +
geom_text(data = subset(prevalencia_por_sexo_idade, sexo == 2), aes(y = -proporcao, label = proporcao), vjust = 0.5, hjust = 1.2) +
scale_fill_manual(values = c("1" = "blue", "2" = "red"),
labels = c("Male", "Female")) +
labs(x = "Age group", y = "SM prevalence (%)", fill = "Sex") +
#facet_wrap(~ study) +
theme_minimal()
# 6. Calcula a prevalência por estudo
prevalencia_por_estudo <- dados %>%
group_by(study, faixa_etaria) %>%
summarise(
total = n(),
sm = sum(sm_prev == 1),
proporcao = round((sm * 100 / total), digits = 1)
)
# 6.1 Plotar a prevalência por estudo
ggplot(prevalencia_por_estudo, aes(x = faixa_etaria, y = proporcao)) +
coord_flip() +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Age group", y = "SM prevalence (%)") +
facet_wrap(~ study) +
theme_minimal()
# 7. Calcula a prevalência por sexo, faixa etária e por estudo
prevalencia_por_agrupamento <- dados %>%
group_by(study, sexo, faixa_etaria) %>%
summarise(
total = n(),
sm = sum(sm_prev == 1),
proporcao = round((sm * 100 / total), digits = 1)
)
# 7.1 Plotar a prevalência por sexo, faixa etária e por estudo
ggplot(prevalencia_por_agrupamento, aes(x = faixa_etaria, y = proporcao, fill = factor(sexo))) +
coord_flip() +
geom_bar(data = subset(prevalencia_por_agrupamento, sexo == 1), aes(y = proporcao), stat = "identity", position = "dodge") +
geom_bar(data = subset(prevalencia_por_agrupamento, sexo == 2), aes(y = -proporcao), stat = "identity", position = "dodge") +
scale_fill_manual(values = c("1" = "blue", "2" = "red"),
labels = c("Male", "Female")) +
labs(x = "Age group", y = "SM prevalence (%)", fill = "Sex") +
facet_wrap(~ study) +
theme_minimal()
