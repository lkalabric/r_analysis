Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
## Shiny Basics
Link? https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/
Installation
If you still haven’t installed the Shiny package, open an R session, connect to the internet, and run
```{r, include=FALSE}
install.packages("shiny")
install.packages("shiny")
knitr::opts_chunk$set(echo = TRUE)
```{r, include=FALSE}
# Install libraries if not installed
list.of.packages <- c("shiny")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Install libraries if not installed
list.of.packages <- c("shiny")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
```{r, include=FALSE}
The Shiny package has eleven built-in examples that each demonstrate how Shiny works. Each example is a self-contained Shiny app.
The Hello Shiny example plots a histogram of R’s faithful dataset with a configurable number of bins. Users can change the number of bins with a slider bar, and the app will immediately respond to their input. You’ll use Hello Shiny to explore the structure of a Shiny app and to create your first app.
To run Hello Shiny, type:
```{r, include=FALSE}
---
title: "Shiny Basics"
---
title: "Shiny Basics"
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/redcap_analysis")
runApp("app-teste.R")
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/redcap_analysis")
runApp("app-teste.R")
knitr::opts_chunk$set(echo = TRUE)
# Install libraries if not installed
list.of.packages <- c("shiny", "bslib")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Install libraries if not installed
list.of.packages <- c("shiny", "bslib")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(shiny)
runExample("01_hello")
library(shiny)
runExample("01_hello")
runApp('C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/redcap_analysis/app-teste.R')
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/redcap_analysis")
runApp("app-teste.R")
runExample("01_hello")      # a histogram
runExample("02_text")       # tables and data frames
expression
runExample("03_reactivity") # a reactive expression
runExample("04_mpg")        # global variables
runGitHub( "r_analysis", "lkalabric")
runGitHub( "r_analysis", "lkalabric")
shinyAppDir()
runGitHub( "r_analysis", "lkalabric")
runGitHub( "r_analysis", "lkalabric")
knitr::opts_chunk$set(echo = TRUE)
runGitHub( "r_analysis", "lkalabric")
library(shiny)
runGitHub( "r_analysis", "lkalabric")
runGitHub( "r_analysis", "lkalabric")
runApp('C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/redcap_analysis/table1.R')
library(shiny)
library(bslib)
library(ggplot2)
# Install libraries if not installed
list.of.packages <- c("shiny", "bslib", "ggplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(shiny)
library(bslib)
library(ggplot2)
file <- "https://github.com/rstudio-education/shiny-course/raw/main/movies.RData"
destfile <- "movies.RData"
download.file(file, destfile)
load("movies.RData")
ui <- page_sidebar(
sidebar = sidebar(
# Select variable for y-axis
selectInput(
inputId = "y",
label = "Y-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "audience_score"
),
# Select variable for x-axis
selectInput(
inputId = "x",
label = "X-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "critics_score"
)
),
# Output: Show scatterplot
card(plotOutput(outputId = "scatterplot"))
)
server <- function(input, output, session) {
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y)) +
geom_point()
})
}
shinyApp(ui = ui, server = server)
list.of.packages <- c("RCurl")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Dados de acesso do projeto
api_token       <- '39169DDCCC39AED2489284B828E0A65A'
api_url         <- 'https://bdp.bahia.fiocruz.br/api/'
# Carregar as bilbiotecas requeridas
library(RCurl)
# Dados de acesso do projeto
api_token       <- '39169DDCCC39AED2489284B828E0A65A'
api_url         <- 'https://bdp.bahia.fiocruz.br/api/'
result <- postForm(
uri='https://redcap.chop.edu/api/',
token='SOME TEXT HERE',
content='project',
format='csv',
returnFormat='csv'
)
result <- postForm(
uri='https://bdp.bahia.fiocruz.br/api/',
token='39169DDCCC39AED2489284B828E0A65A',
content='project',
format='csv',
returnFormat='csv'
)
httr::set_config(httr::config(ssl_verifypeer=0L))
result <- postForm(
uri='https://bdp.bahia.fiocruz.br/api/',
token='39169DDCCC39AED2489284B828E0A65A',
content='project',
format='csv',
returnFormat='csv'
)
# Baixando das a partir de um report para analise em R
library(RCurl)
# Replace placeholders with your actual values
url <- "https://bdp.bahia.fiocruz.br/api/"
token <- "39169DDCCC39AED2489284B828E0A65A"
report_id <- "Tabela 1. Características dos participantes"
format <- "csv"
params <- list(
token = token,
content = "report",
report_id = report_id,
format = format
)
response <- getForm(url, .params = params)
# Write the response to a file
writeLines(response, "report_data.csv")
result <- postForm(
uri='https://bdp.bahia.fiocruz.br/api/',
token='39169DDCCC39AED2489284B828E0A65A',
content='project',
format='csv',
returnFormat='csv'
)
# Baixando dados a partir de um report de um projeto no REDCap
library(RCurl)
# Replace placeholders with your actual values
url <- "https://bdp.bahia.fiocruz.br/api/"
token <- "39169DDCCC39AED2489284B828E0A65A"
report_id <- "Tabela 1. Características dos participantes"
format <- "csv"
params <- list(
token = token,
content = "report",
report_id = report_id,
format = format
)
response <- getForm(url, .params = params)
# Write the response to a file
writeLines(response, "report_data.csv")
# Outra forma de acessar o servidor REDCap
result <- postForm(
uri='https://bdp.bahia.fiocruz.br/api/',
token='39169DDCCC39AED2489284B828E0A65A',
content='project',
format='csv',
returnFormat='csv'
)
print(result)
install.packages("geobr", dependencies = T)
library(geobr)
install.packages(c("corrplot", "cpp11", "doBy", "gtable", "pillar", "quantreg", "Rcpp", "withr"))
install.packages(c("corrplot", "cpp11", "doBy", "gtable", "pillar", "quantreg", "Rcpp", "withr"))
library(sf)
library(magrittr)
library(dplyr)
library(ggplot2)
GEOBR_DATA = list_geobr()
install.packages("geobr", dependencies = T)
library(geobr)
install.packages("geobr", dependencies = T)
library(geobr)
library(sf)
library(magrittr)
library(dplyr)
library(ggplot2)
GEOBR_DATA = list_geobr()
View(GEOBR_DATA)
BA_GEO = read_municipality(code_muni = 29, year = 2020)
View(BA_GEO)
BA = read_state(code_state = 29)
BIOMA = read_biomes(year = 2019)
MESO_BA = read_meso_region(code_meso = 29, year = 2020)
BRASIL = read_country(year = 2020)
SALVADOR = read_municipality(code_muni = 2927408, year = 2020)
SINES = read_municipality(code_muni = 2927903, year = 2020)
Saude = read_health_facilities(code_muni = 29)
#GERAR OS MAPAS
#Opção 1 - Gerar e sobrepor mapas.
# Brasil e Bahia
ggplot() +
geom_sf(data = BRASIL, fill="#2D3E50", color="#FEBF57", size=0.15, show.legend = T) +
geom_sf(data = BA_GEO, fill="#2D3E50", color="#FEBF57", size=0.15, show.legend = T)
# Bahia e Santa Inês
ggplot() +
geom_sf(data = BRASIL, fill="#2D3E50", color="#FEBF57", size=0.15, show.legend = T) +
geom_sf(data = BA, fill="white", color="#FEBF57", size=0.15, show.legend = T) +
geom_sf(data = SINES, fill="black", color="black", size=0.15, show.legend = T) +
geom_sf(data = SINES, aes(fill = name_muni))
ggplot() +
geom_sf(data = SINES, fill="#2D3E50", color="#FEBF57", size=0.15, show.legend = T)
#opção 2 - Plot, simples e fácil.
plot(BRASIL)
plot(BIOMA)
plot(BA)
plot(BIOMA)
plot(BA)
#opção 3 - Listar o nome das feições.
ggplot() +
geom_sf(data = MESO_BA, aes(fill = name_meso)) #+ scale_fill_distiller(palette = "Reds")
# Preparação do ambiente
list.of.packages <- c("dplyr", "readr", "ggpubr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(dplyr)  # "dplyr" é um pacote para transformação de dados
library(readr)  # "readr" para leitura de dados de arquivos delimitados
library(ggpubr) # plota gráficos diversos
# Carregando os dados de um arquivo .csv
#tabela1 <- read.csv("C:/Users/luciano.kalabric/OneDrive - FIOCRUZ/Projetos/2014- Mitermayer Esquistossomose urbana/Produção/Publicações/2023 Artigo Urban Schisto/Tabela 1 - SB2011.csv")
#tabela1 <- read.csv("C:/Users/luciano.kalabric/OneDrive - FIOCRUZ/Projetos/2014- Mitermayer Esquistossomose urbana/Produção/Publicações/2023 Artigo Urban Schisto/Tabela 1 - DC2017.csv")
#tabela1 <- read.csv("C:/Users/luciano.kalabric/OneDrive - FIOCRUZ/Projetos/2014- Mitermayer Esquistossomose urbana/Produção/Publicações/2023 Artigo Urban Schisto/Tabela 1 - SA2018.csv")
#tabela1 <- read.csv("C:/Users/luciano.kalabric/OneDrive - FIOCRUZ/Projetos/2014- Mitermayer Esquistossomose urbana/Produção/Publicações/2023 Artigo Urban Schisto/Tabela 1 - PI2019.csv")
#tabela1 <- read.csv("C:/Users/luciano.kalabric/OneDrive - FIOCRUZ/Projetos/2014- Mitermayer Esquistossomose urbana/Produção/Publicações/2023 Artigo Urban Schisto/Tabela 1 - LP2022.csv")
#tabela1 <- read.csv("C:/Users/luciano.kalabric/OneDrive - FIOCRUZ/Projetos/2014- Mitermayer Esquistossomose urbana/Produção/Publicações/2023 Artigo Urban Schisto/Tabela 1 - BF2023.csv")
tabela1 <- read.csv2("C:/Users/luciano.kalabric/OneDrive - FIOCRUZ/Projetos/2014- Mitermayer Esquistossomose urbana/Produção/Publicações/2023 Artigo Urban Schisto/Tabela 1 - All.csv")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Install libraries if not installed
list.of.packages <- c("shiny", "bslib")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Install libraries if not installed
list.of.packages <- c("shiny", "bslib")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(shiny)
runExample("01_hello")      # a histogram
runExample("02_text")       # tables and data frames
library(shiny)
library(bslib)
# Define UI for app that draws a histogram ----
ui <- page_sidebar(
# App title ----
title = "Hello Shiny!",
# Sidebar panel for inputs ----
sidebar = sidebar(
# Input: Slider for the number of bins ----
sliderInput(
inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30
)
),
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
library(shiny)
library(bslib)
# Define UI for app that draws a histogram ----
ui <- page_sidebar(
# App title ----
title = "Hello Shiny!",
# Sidebar panel for inputs ----
sidebar = sidebar(
# Input: Slider for the number of bins ----
sliderInput(
inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30
)
),
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#007bc2", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#007bc2", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
library(shiny)
# See above for the definitions of ui and server
ui <- ...
library(shiny)
# See above for the definitions of ui and server
ui <- ...
server <- ...
shinyApp(ui = ui, server = server)
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/redcap_analysis")
runApp("app-teste.R")
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/redcap_analysis")
runApp("app-teste.R")
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/redcap_analysis")
runApp("app-teste.R")
# Install libraries if not installed
list.of.packages <- c("shiny", "bslib")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Create an app
library(shiny)
library(bslib)
# Define UI for app that draws a histogram ----
ui <- page_sidebar(
# App title ----
title = "Hello Shiny!",
# Sidebar panel for inputs ----
sidebar = sidebar(
# Input: Slider for the number of bins ----
sliderInput(
inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30
)
),
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#007bc2", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Run...
shinyApp(ui = ui, server = server)
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/redcap_analysis/my_app")
runApp("app.R")
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/my_app")
runApp("app.R")
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/my_app")
runApp("app.R")
# Install libraries if not installed
list.of.packages <- c("shiny", "bslib")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(shiny)
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/my_app")
runApp("app.R")
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis")
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/my_app")
runApp("app.R")
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/my_app/")
runApp("app.R")
# Instala as biblioteca básicas para conexão API no R
install.packages(c("httr", "jsonlite"))inst
# Testa as bibliotecas
library(httr)
library(jsonlite)
# Testa as bibliotecas
library(httr)
library(jsonlite)
# API Playground REDCap
#!/usr/bin/env Rscript
token <- "39169DDCCC39AED2489284B828E0A65A"
url <- "https://bdp.bahia.fiocruz.br/api/"
formData <- list("token"=token,
content='project',
format='json',
returnFormat='json'
)
response <- httr::POST(url, body = formData, encode = "form")
result <- httr::content(response)
print(result)
View(formData)
View(response)
View(result)
# Export records to R
install.packages("RCurl")
source('config.R')
library(RCurl)
result <- postForm(
api_url,
token=api_token,
content='record',
format='json',
type='flat'
)
print(result)
#Pacotes e datasets ----
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("ggpubr")
install.packages("ggplot2")
library(tidyverse)
library(ggplot2)
library(dplyr)
library(ggpubr)
#Defini??o de diret?rio de trabalho----
getwd()
#setwd("G:\\Meu Drive\\Inicia??o Cient?fica Mitermayer\\KAP\\Bancos de dados")
#setwd("C:\\Users\\kalabric\\Downloads")
#setwd("C:\\Users\\kalabric\\OneDrive - FIOCRUZ\\Projetos\\2019 Kalabric & Camila - Schisto Pirajá\\Produção\\2023 Educação")
setwd("C:\\Users\\kalabric\\Documents\\GitHub\\r_analysis\\datasets")
#An?lise explorat?ria dos dados----
df.cap <- read.csv(file="pre_pos.csv")
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/datasets")
#An?lise explorat?ria dos dados----
df.cap <- read.csv(file="pre_pos.csv")
View(df.cap)
#Avaliando a estrutura do dataset
str(df.cap)
#Transformando algumas vari?veis categ?ricas em fatores
cols <- c("sexo", "nat1", "esc")
df.cap[cols] <- lapply(df.cap[cols], as.factor)
str(df.cap)
# Modificando os nomes de alguns fatores
levels(df.cap$sexo) <- c("Homem", "Mulher")
levels(df.cap$nat1) <- c("Salvador", "Outro")
levels(df.cap$esc) <- c("Analfabeto/Fund1_incompleto", "Fund1_completo", "Fund2_completo", "Med_completo", "Sup_completo")
summary(df.cap)
sd(sub.df.cap$Idade)
## Exibir a tabela
## Link: https://www.statology.org/str-function-in-r/
str(df.cap)
## Grafico pareado sem estratifica??o
ggpaired(df.cap,cond1= "pre_total", cond2= "pos_total",ylab= "Resultado no question?rio CAP", xlab= "Momento de aplica??o", title= "Desempenho no question?rio CAP",fill= "condition",
line.color = "red",line.size= 0.4,palette="jco")
## Gr?fico pareados por sexo
ggpaired(df.cap,cond1= "pre_total", cond2= "pos_total",ylab= "Resultado no question?rio CAP", xlab= "Momento de aplica??o", title= "Desempenho no question?rio CAP",fill= "condition",
line.color = "red",line.size= 0.4,palette="jco") + facet_wrap(~ sexo)
## Gr?fico pareados por esc
ggpaired(df.cap,cond1= "pre_total", cond2= "pos_total",ylab= "Resultado no question?rio CAP", xlab= "Momento de aplica??o", title= "Desempenho no question?rio CAP",fill= "condition",
line.color = "red",line.size= 0.4,palette="jco") + facet_wrap(~ esc)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/my_app/")
getwd()
library(shiny)
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/my_app/")
runApp("app.R")
# Este comando abre um arquivo e importa os dados para uma tabela no R denominada data frama
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/datasets/")
df.cap <- read.csv(file="pre_pos.csv")
