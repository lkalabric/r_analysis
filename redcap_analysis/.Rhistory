if (s == soma_total) {
solucao_ordenada <- sort(j_list_num)
# Convertendo a lista em uma string, separando cada elemento por ""
string_numeros <- paste(solucao_ordenada, collapse = "")
# Convertendo a string em um número inteiro
numero_final <- as.numeric(string_numeros)
solucoes <- c(solucoes, numero_final)
# Removendo elementos duplicados e comparando os comprimentos
solucao_repetida <- length(solucoes) != length(unique(solucoes))
if (solucao_repetida) {
solucoes <- unique(solucoes)
next
} else {
n_solucoes <- n_solucoes + 1
# Imprimindo a lista final
print(paste("Solucao: ", n_solucoes))
# Imprimindo a lista final
print ("Algarismos do numero: ")
print(j_list_num)
}
}
}
}
}
# Define a variavel soma
s <- 30
# Definindo a variável a que corresponde ao numero de algarismos de um numero inteiro j
a <- 4
print(paste("Soma:", s, "Numero de algaritimos: ", a))
# Possiveis algarismos
algarismos <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
# Lista de solucoes
solucoes <- c()
j_min <- 0
# Loop para criar um numero minimo formado por "a" algarismos que nao se repetem
for (j in 1:a) {
j_min <- j_min + algarismos[j]*10^(a-j)
}
print(j_min)
j_max<-0
# Loop para criar um numero maximo formado por "a" algarismos que nao se repetem
for (j in 1:a) {
j_max <- j_max + algarismos[length(algarismos)+1-j]*10^(a-j)
}
print(j_max)
n_solucoes <- 0
# Loop para testar se a soma dos algarismos de um numero j correspondem a s
for (i in j_min:j_max) {
# Convertendo o número para uma string e depois para uma lista de caracteres
j_str <- as.character(i)
j_list_char <- strsplit(j_str, "")[[1]]
# Convertendo a lista de caracteres para uma lista de números inteiros
j_list_num <- as.integer(j_list_char)
# Verificando se "0" está presente na lista
tem_zero <- any(j_list_num == 0)
# Imprimindo o resultado dos numeros validos
if (tem_zero) {
next
} else {
# Removendo elementos duplicados e comparando os comprimentos
algarismos_repetidos <- length(j_list_char) != length(unique(j_list_char))
if (algarismos_repetidos) {
next
} else {
# Calculando a soma dos elementos
soma_total <- sum(j_list_num)
if (s == soma_total) {
solucao_ordenada <- sort(j_list_num)
# Convertendo a lista em uma string, separando cada elemento por ""
string_numeros <- paste(solucao_ordenada, collapse = "")
# Convertendo a string em um número inteiro
numero_final <- as.numeric(string_numeros)
solucoes <- c(solucoes, numero_final)
# Removendo elementos duplicados e comparando os comprimentos
solucao_repetida <- length(solucoes) != length(unique(solucoes))
if (solucao_repetida) {
solucoes <- unique(solucoes)
next
} else {
n_solucoes <- n_solucoes + 1
# Imprimindo a lista final
print(paste("Solucao: ", n_solucoes))
# Imprimindo a lista final
print ("Algarismos do numero: ")
print(j_list_num)
}
}
}
}
}
# Define a variavel soma
s <- 23
# Definindo a variável a que corresponde ao numero de algarismos de um numero inteiro j
a <- 4
print(paste("Soma:", s, "Numero de algaritimos: ", a))
# Possiveis algarismos
algarismos <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
# Lista de solucoes
solucoes <- c()
j_min <- 0
# Loop para criar um numero minimo formado por "a" algarismos que nao se repetem
for (j in 1:a) {
j_min <- j_min + algarismos[j]*10^(a-j)
}
print(j_min)
j_max<-0
# Loop para criar um numero maximo formado por "a" algarismos que nao se repetem
for (j in 1:a) {
j_max <- j_max + algarismos[length(algarismos)+1-j]*10^(a-j)
}
print(j_max)
n_solucoes <- 0
# Loop para testar se a soma dos algarismos de um numero j correspondem a s
for (i in j_min:j_max) {
# Convertendo o número para uma string e depois para uma lista de caracteres
j_str <- as.character(i)
j_list_char <- strsplit(j_str, "")[[1]]
# Convertendo a lista de caracteres para uma lista de números inteiros
j_list_num <- as.integer(j_list_char)
# Verificando se "0" está presente na lista
tem_zero <- any(j_list_num == 0)
# Imprimindo o resultado dos numeros validos
if (tem_zero) {
next
} else {
# Removendo elementos duplicados e comparando os comprimentos
algarismos_repetidos <- length(j_list_char) != length(unique(j_list_char))
if (algarismos_repetidos) {
next
} else {
# Calculando a soma dos elementos
soma_total <- sum(j_list_num)
if (s == soma_total) {
solucao_ordenada <- sort(j_list_num)
# Convertendo a lista em uma string, separando cada elemento por ""
string_numeros <- paste(solucao_ordenada, collapse = "")
# Convertendo a string em um número inteiro
numero_final <- as.numeric(string_numeros)
solucoes <- c(solucoes, numero_final)
# Removendo elementos duplicados e comparando os comprimentos
solucao_repetida <- length(solucoes) != length(unique(solucoes))
if (solucao_repetida) {
solucoes <- unique(solucoes)
next
} else {
n_solucoes <- n_solucoes + 1
# Imprimindo a lista final
print(paste("Solucao: ", n_solucoes))
# Imprimindo a lista final
print ("Algarismos do numero: ")
print(j_list_num)
}
}
}
}
}
# Define a variavel soma
s <- 18
# Definindo a variável a que corresponde ao numero de algarismos de um numero inteiro j
a <- 4
print(paste("Soma:", s, "Numero de algaritimos: ", a))
# Possiveis algarismos
algarismos <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
# Lista de solucoes
solucoes <- c()
j_min <- 0
# Loop para criar um numero minimo formado por "a" algarismos que nao se repetem
for (j in 1:a) {
j_min <- j_min + algarismos[j]*10^(a-j)
}
print(j_min)
j_max<-0
# Loop para criar um numero maximo formado por "a" algarismos que nao se repetem
for (j in 1:a) {
j_max <- j_max + algarismos[length(algarismos)+1-j]*10^(a-j)
}
print(j_max)
n_solucoes <- 0
# Loop para testar se a soma dos algarismos de um numero j correspondem a s
for (i in j_min:j_max) {
# Convertendo o número para uma string e depois para uma lista de caracteres
j_str <- as.character(i)
j_list_char <- strsplit(j_str, "")[[1]]
# Convertendo a lista de caracteres para uma lista de números inteiros
j_list_num <- as.integer(j_list_char)
# Verificando se "0" está presente na lista
tem_zero <- any(j_list_num == 0)
# Imprimindo o resultado dos numeros validos
if (tem_zero) {
next
} else {
# Removendo elementos duplicados e comparando os comprimentos
algarismos_repetidos <- length(j_list_char) != length(unique(j_list_char))
if (algarismos_repetidos) {
next
} else {
# Calculando a soma dos elementos
soma_total <- sum(j_list_num)
if (s == soma_total) {
solucao_ordenada <- sort(j_list_num)
# Convertendo a lista em uma string, separando cada elemento por ""
string_numeros <- paste(solucao_ordenada, collapse = "")
# Convertendo a string em um número inteiro
numero_final <- as.numeric(string_numeros)
solucoes <- c(solucoes, numero_final)
# Removendo elementos duplicados e comparando os comprimentos
solucao_repetida <- length(solucoes) != length(unique(solucoes))
if (solucao_repetida) {
solucoes <- unique(solucoes)
next
} else {
n_solucoes <- n_solucoes + 1
# Imprimindo a lista final
print(paste("Solucao: ", n_solucoes))
# Imprimindo a lista final
print ("Algarismos do numero: ")
print(j_list_num)
}
}
}
}
}
---
title: "Shiny Basics"
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
```{r setup, include=FALSE}
---
title: "Shiny Basics"
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
install.packages("shiny")
library(shiny)
runExample("01_hello")
---
title: "Shiny Basics"
```{r setup, include=FALSE}
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
summary(cars)
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```{r, include=FALSE}
```{r, include=FALSE}
library(shiny)
runExample("01_hello")
```{r, include=FALSE}
---
title: "Shiny Basics"
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
summary(cars)
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
plot(pressure)
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
## Shiny Basics
Link? https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/
Installation
If you still haven’t installed the Shiny package, open an R session, connect to the internet, and run
```{r, include=FALSE}
install.packages("shiny")
install.packages("shiny")
knitr::opts_chunk$set(echo = TRUE)
```{r, include=FALSE}
# Install libraries if not installed
list.of.packages <- c("shiny")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Install libraries if not installed
list.of.packages <- c("shiny")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
```{r, include=FALSE}
The Shiny package has eleven built-in examples that each demonstrate how Shiny works. Each example is a self-contained Shiny app.
The Hello Shiny example plots a histogram of R’s faithful dataset with a configurable number of bins. Users can change the number of bins with a slider bar, and the app will immediately respond to their input. You’ll use Hello Shiny to explore the structure of a Shiny app and to create your first app.
To run Hello Shiny, type:
```{r, include=FALSE}
---
title: "Shiny Basics"
---
title: "Shiny Basics"
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
---
title: "Shiny Basics"
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
summary(cars)
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
plot(pressure)
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
## Shiny Basics
Link? https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/
Installation
If you still haven’t installed the Shiny package, open an R session, connect to the internet, and run
```{r, include=FALSE}
# Install libraries if not installed
list.of.packages <- c("shiny")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Install libraries if not installed
list.of.packages <- c("shiny")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
```{r, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
summary(cars)
summary(cars)
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
plot(pressure)
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
## Shiny Basics
Link? https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/
## Shiny Basics
# Link https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/
Installation
library(shiny)
runExample("01_hello")
library(shiny)
runExample("01_hello")
library(shiny)
library(bslib)
# Define UI for app that draws a histogram ----
ui <- page_sidebar(
# App title ----
title = "Hello Shiny!",
# Sidebar panel for inputs ----
sidebar = sidebar(
# Input: Slider for the number of bins ----
sliderInput(
inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30
)
),
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
```{r, include=FALSE}
library(shiny)
library(bslib)
# Install libraries if not installed
list.of.packages <- c("shiny", "bslib")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
```{r, include=FALSE}
library(shiny)
library(bslib)
# Define UI for app that draws a histogram ----
ui <- page_sidebar(
# App title ----
title = "Hello Shiny!",
# Sidebar panel for inputs ----
sidebar = sidebar(
# Input: Slider for the number of bins ----
sliderInput(
inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30
)
),
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
# Define UI for app that draws a histogram ----
ui <- page_sidebar(
# App title ----
title = "Hello Shiny!",
# Sidebar panel for inputs ----
sidebar = sidebar(
# Input: Slider for the number of bins ----
sliderInput(
inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30
)
),
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
library(shiny)
# See above for the definitions of ui and server
ui <- ...
```{r server, include=FALSE}
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#007bc2", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
```{r shinyapp, include=FALSE}
library(shiny)
# See above for the definitions of ui and server
ui <- ...
server <- ...
shinyApp(ui = ui, server = server)
# Install libraries if not installed
list.of.packages <- c("shiny", "bslib")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(shiny)
runExample("01_hello")
library(shiny)
library(bslib)
# Define UI for app that draws a histogram ----
ui <- page_sidebar(
# App title ----
title = "Hello Shiny!",
# Sidebar panel for inputs ----
sidebar = sidebar(
# Input: Slider for the number of bins ----
sliderInput(
inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30
)
),
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#007bc2", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Run...
shinyApp(ui = ui, server = server)
runApp("app.R")
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/redcap_analysis")
runApp("app.R")
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/redcap_analysis")
runApp("app.R")
print("cars")
print(cars)
summary(cars)
runApp()
```{r}
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/redcap_analysis")
runApp("app-teste.R")
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/redcap_analysis")
runApp("app-teste.R")
runApp('app-teste.R')
