h2("Widgets tab content")
)
)
)
)
## Title page
header <- dashboardHeader(
title = "Basic dashboard"
)
## Sidebar content
sidebar <- dashboardSidebar(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)
## Body content
body <- dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
u2 <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
shinyApp(u2, server)
library(shinydashboard)
#Structure overview
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
## ui.R ##
ui <- dashboardPage(
## Title page
dashboardHeader(title = "Basic dashboard"),
## Sidebar content
dashboardSidebar(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
),
## Body content
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("shinydashboard")
install.packages("shinydashboard")
install.packages("shinydashboard")
knitr::opts_chunk$set(echo = TRUE)
## ui.R ##
library(shinydashboard)
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
knitr::opts_chunk$set(echo = TRUE)
install.packages("shinydashboard")
install.packages("shinydashboard")
## ui.R ##
library(shinydashboard)
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
knitr::opts_chunk$set(echo = TRUE)
## app.R ##
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
## app.R ##
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
install.packages("shinydashboard")
install.packages("shinydashboard")
## ui.R ##
library(shinydashboard)
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
## app.R ##
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
## app.R ##
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
# Install libraries if not installed
list.of.packages <- c("shiny", "bslib", "shinydashboard")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
## ui.R ##
library(shinydashboard)
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
## app.R ##
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
## app.R ##
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)
)
## Body content
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
## Body content
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
## Body content
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
install.packages("devtools")
devtools::install_github("thewileylab/shinyREDCap")
library(shiny)
library(shinyREDCap)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
---
title: "Shiny-REDCap dashboard"
author: "Luciano K. Silva"
date: "2024-12-20"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
summary(cars)
```
You can also embed plots, for example:
plot(pressure)
```
#!/usr/bin/env Rscript
token <- "39169DDCCC39AED2489284B828E0A65A"
url <- "https://bdp.bahia.fiocruz.br/api/"
formData <- list("token"=token,
content='project',
format='json',
returnFormat='json'
)
response <- httr::POST(url, body = formData, encode = "form")
result <- httr::content(response)
print(result)
```{r pressure, echo=FALSE}
library(shiny)
library(REDCapR)
# Define the UI for the application
ui <- fluidPage(
titlePanel("REDCap Data Viewer"),
sidebarLayout(
sidebarPanel(
textInput("api_url", "REDCap API URL"),
textInput("api_token", "REDCap API Token")
),
mainPanel(
tableOutput("data_table")
)
)
)
# Define the server logic for the application
server <- function(input, output) {
output$data_table <- renderTable({
req(input$api_url, input$api_token)
# Connect to REDCap and retrieve data
redcap_connection <- redcap_connection(url = input$api_url, token = input$api_token)
data <- redcap_read(redcap_uri = input$api_url, token = input$api_token)$data
data
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define the UI for the application
ui <- fluidPage(
titlePanel("REDCap Data Viewer"),
sidebarLayout(
sidebarPanel(
textInput("api_url", "REDCap API URL"),
textInput("api_token", "REDCap API Token")
),
mainPanel(
tableOutput("data_table")
)
)
)
# Define the server logic for the application
server <- function(input, output) {
output$data_table <- renderTable({
req(input$api_url, input$api_token)
# Connect to REDCap and retrieve data
redcap_connection <- redcap_connection(url = input$api_url, token = input$api_token)
data <- redcap_read(redcap_uri = input$api_url, token = input$api_token)$data
data
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Instala as biblioteca básicas para conexão API no R
install.packages(c("httr", "jsonlite"))inst
# Testa as bibliotecas
library(httr)
library(jsonlite)
# API Playground REDCap
#!/usr/bin/env Rscript
token <- "39169DDCCC39AED2489284B828E0A65A"
url <- "https://bdp.bahia.fiocruz.br/api/"
formData <- list("token"=token,
content='project',
format='json',
returnFormat='json'
)
response <- httr::POST(url, body = formData, encode = "form")
result <- httr::content(response)
print(result)
# Export records to R
install.packages("RCurl")
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis")
source("config.R")
library(RCurl)
result <- postForm(
api_url,
token=api_token,
content='record',
format='json',
type='flat'
)
source('config.R')
source('config.R')
library(RCurl)
result <- postForm(
api_url,
token=api_token,
content='instrument',
format='json'
)
print(result)
install.packages("devtools::install_github('r-lib/httr')")
source('config.R')
library(RCurl)
result <- postForm(
api_url,
token=api_token,
content='instrument',
format='json'
)
# Instala as biblioteca básicas para conexão API no R
install.packages(c("httr", "jsonlite"))inst
# Instala as biblioteca básicas para conexão API no R
list.of.packages <- c("httr", "jsonlite")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Testa as bibliotecas
library(httr)
library(jsonlite)
# API Playground REDCap
#!/usr/bin/env Rscript
token <- "39169DDCCC39AED2489284B828E0A65A"
url <- "https://bdp.bahia.fiocruz.br/api/"
formData <- list("token"=token,
content='project',
format='json',
returnFormat='json'
)
response <- httr::POST(url, body = formData, encode = "form")
result <- httr::content(response)
print(result)
# API Playground REDCap
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis")
source("config.R")
formData <- list("token"=token,
content='project',
format='json',
returnFormat='json'
)
response <- httr::POST(url, body = formData, encode = "form")
result <- httr::content(response)
print(result)
# API Playground REDCap
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/redcap_analysis")
source("config.R")
formData <- list("token"=api_token,
content='project',
format='json',
returnFormat='json'
)
response <- httr::POST(api_url, body = formData, encode = "form")
result <- httr::content(response)
print(result)
# Export Records
formData <- list("token"=api_token,
content='record',
format='json',
type='flat'
)
response <- httr::POST(api_url, body = formData, encode = "form")
result <- httr::content(records)
result <- httr::content(record)
print(records)
# Export Records
formData <- list("token"=api_token,
content='record',
format='json',
type='flat'
)
response <- httr::POST(api_url, body = formData, encode = "form")
result <- httr::content(record)
print(records)
# Export Records
formData <- list("token"=api_token,
content='record',
format='csv',
type='flat'
)
response <- httr::POST(api_url, body = formData, encode = "form")
result <- httr::content(record)
response <- httr::POST(api_url, body = formData, encode = "form")
result <- httr::content(response)
results_df <- read.csv(text = result)
View(result)
result_df <- httr::content(response)
frequency(result_df$sexo)
table(result_df$sexo)
summary(result_df$idade)
