# Convertendo a lista de caracteres para uma lista de números inteiros
j_list_num <- as.integer(j_list_char)
# Verificando se "0" está presente na lista
tem_zero <- any(j_list_num == 0)
# Imprimindo o resultado dos numeros validos
if (tem_zero) {
next
} else {
# Removendo elementos duplicados e comparando os comprimentos
algarismos_repetidos <- length(j_list_char) != length(unique(j_list_char))
if (algarismos_repetidos) {
next
} else {
# Calculando a soma dos elementos
soma_total <- sum(j_list_num)
if (s == soma_total) {
solucao_ordenada <- sort(j_list_num)
# Convertendo a lista em uma string, separando cada elemento por ""
string_numeros <- paste(solucao_ordenada, collapse = "")
# Convertendo a string em um número inteiro
numero_final <- as.numeric(string_numeros)
solucoes <- c(solucoes, numero_final)
# Removendo elementos duplicados e comparando os comprimentos
solucao_repetida <- length(solucoes) != length(unique(solucoes))
if (solucao_repetida) {
solucoes <- unique(solucoes)
next
} else {
n_solucoes <- n_solucoes + 1
# Imprimindo a lista final
print(paste("Solucao: ", n_solucoes))
# Imprimindo a lista final
print ("Algarismos do numero: ")
print(j_list_num)
}
}
}
}
}
# Define a variavel soma
s <- 23
# Definindo a variável a que corresponde ao numero de algarismos de um numero inteiro j
a <- 4
print(paste("Soma:", s, "Numero de algaritimos: ", a))
# Possiveis algarismos
algarismos <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
# Lista de solucoes
solucoes <- c()
j_min <- 0
# Loop para criar um numero minimo formado por "a" algarismos que nao se repetem
for (j in 1:a) {
j_min <- j_min + algarismos[j]*10^(a-j)
}
print(j_min)
j_max<-0
# Loop para criar um numero maximo formado por "a" algarismos que nao se repetem
for (j in 1:a) {
j_max <- j_max + algarismos[length(algarismos)+1-j]*10^(a-j)
}
print(j_max)
n_solucoes <- 0
# Loop para testar se a soma dos algarismos de um numero j correspondem a s
for (i in j_min:j_max) {
# Convertendo o número para uma string e depois para uma lista de caracteres
j_str <- as.character(i)
j_list_char <- strsplit(j_str, "")[[1]]
# Convertendo a lista de caracteres para uma lista de números inteiros
j_list_num <- as.integer(j_list_char)
# Verificando se "0" está presente na lista
tem_zero <- any(j_list_num == 0)
# Imprimindo o resultado dos numeros validos
if (tem_zero) {
next
} else {
# Removendo elementos duplicados e comparando os comprimentos
algarismos_repetidos <- length(j_list_char) != length(unique(j_list_char))
if (algarismos_repetidos) {
next
} else {
# Calculando a soma dos elementos
soma_total <- sum(j_list_num)
if (s == soma_total) {
solucao_ordenada <- sort(j_list_num)
# Convertendo a lista em uma string, separando cada elemento por ""
string_numeros <- paste(solucao_ordenada, collapse = "")
# Convertendo a string em um número inteiro
numero_final <- as.numeric(string_numeros)
solucoes <- c(solucoes, numero_final)
# Removendo elementos duplicados e comparando os comprimentos
solucao_repetida <- length(solucoes) != length(unique(solucoes))
if (solucao_repetida) {
solucoes <- unique(solucoes)
next
} else {
n_solucoes <- n_solucoes + 1
# Imprimindo a lista final
print(paste("Solucao: ", n_solucoes))
# Imprimindo a lista final
print ("Algarismos do numero: ")
print(j_list_num)
}
}
}
}
}
# Define a variavel soma
s <- 18
# Definindo a variável a que corresponde ao numero de algarismos de um numero inteiro j
a <- 4
print(paste("Soma:", s, "Numero de algaritimos: ", a))
# Possiveis algarismos
algarismos <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
# Lista de solucoes
solucoes <- c()
j_min <- 0
# Loop para criar um numero minimo formado por "a" algarismos que nao se repetem
for (j in 1:a) {
j_min <- j_min + algarismos[j]*10^(a-j)
}
print(j_min)
j_max<-0
# Loop para criar um numero maximo formado por "a" algarismos que nao se repetem
for (j in 1:a) {
j_max <- j_max + algarismos[length(algarismos)+1-j]*10^(a-j)
}
print(j_max)
n_solucoes <- 0
# Loop para testar se a soma dos algarismos de um numero j correspondem a s
for (i in j_min:j_max) {
# Convertendo o número para uma string e depois para uma lista de caracteres
j_str <- as.character(i)
j_list_char <- strsplit(j_str, "")[[1]]
# Convertendo a lista de caracteres para uma lista de números inteiros
j_list_num <- as.integer(j_list_char)
# Verificando se "0" está presente na lista
tem_zero <- any(j_list_num == 0)
# Imprimindo o resultado dos numeros validos
if (tem_zero) {
next
} else {
# Removendo elementos duplicados e comparando os comprimentos
algarismos_repetidos <- length(j_list_char) != length(unique(j_list_char))
if (algarismos_repetidos) {
next
} else {
# Calculando a soma dos elementos
soma_total <- sum(j_list_num)
if (s == soma_total) {
solucao_ordenada <- sort(j_list_num)
# Convertendo a lista em uma string, separando cada elemento por ""
string_numeros <- paste(solucao_ordenada, collapse = "")
# Convertendo a string em um número inteiro
numero_final <- as.numeric(string_numeros)
solucoes <- c(solucoes, numero_final)
# Removendo elementos duplicados e comparando os comprimentos
solucao_repetida <- length(solucoes) != length(unique(solucoes))
if (solucao_repetida) {
solucoes <- unique(solucoes)
next
} else {
n_solucoes <- n_solucoes + 1
# Imprimindo a lista final
print(paste("Solucao: ", n_solucoes))
# Imprimindo a lista final
print ("Algarismos do numero: ")
print(j_list_num)
}
}
}
}
}
---
title: "Shiny Basics"
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
```{r setup, include=FALSE}
---
title: "Shiny Basics"
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
install.packages("shiny")
library(shiny)
runExample("01_hello")
---
title: "Shiny Basics"
```{r setup, include=FALSE}
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
summary(cars)
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```{r, include=FALSE}
```{r, include=FALSE}
library(shiny)
runExample("01_hello")
```{r, include=FALSE}
---
title: "Shiny Basics"
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
summary(cars)
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
plot(pressure)
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
## Shiny Basics
Link? https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/
Installation
If you still haven’t installed the Shiny package, open an R session, connect to the internet, and run
```{r, include=FALSE}
install.packages("shiny")
install.packages("shiny")
knitr::opts_chunk$set(echo = TRUE)
```{r, include=FALSE}
# Install libraries if not installed
list.of.packages <- c("shiny")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Install libraries if not installed
list.of.packages <- c("shiny")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
```{r, include=FALSE}
The Shiny package has eleven built-in examples that each demonstrate how Shiny works. Each example is a self-contained Shiny app.
The Hello Shiny example plots a histogram of R’s faithful dataset with a configurable number of bins. Users can change the number of bins with a slider bar, and the app will immediately respond to their input. You’ll use Hello Shiny to explore the structure of a Shiny app and to create your first app.
To run Hello Shiny, type:
```{r, include=FALSE}
---
title: "Shiny Basics"
---
title: "Shiny Basics"
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/redcap_analysis")
runApp("app-teste.R")
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/redcap_analysis")
runApp("app-teste.R")
knitr::opts_chunk$set(echo = TRUE)
# Install libraries if not installed
list.of.packages <- c("shiny", "bslib")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Install libraries if not installed
list.of.packages <- c("shiny", "bslib")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(shiny)
runExample("01_hello")
library(shiny)
runExample("01_hello")
runApp('C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/redcap_analysis/app-teste.R')
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/redcap_analysis")
runApp("app-teste.R")
runExample("01_hello")      # a histogram
runExample("02_text")       # tables and data frames
expression
runExample("03_reactivity") # a reactive expression
runExample("04_mpg")        # global variables
runGitHub( "r_analysis", "lkalabric")
runGitHub( "r_analysis", "lkalabric")
shinyAppDir()
runGitHub( "r_analysis", "lkalabric")
runGitHub( "r_analysis", "lkalabric")
knitr::opts_chunk$set(echo = TRUE)
runGitHub( "r_analysis", "lkalabric")
library(shiny)
runGitHub( "r_analysis", "lkalabric")
runGitHub( "r_analysis", "lkalabric")
runApp('C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/redcap_analysis/table1.R')
library(shiny)
library(bslib)
library(ggplot2)
# Install libraries if not installed
list.of.packages <- c("shiny", "bslib", "ggplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(shiny)
library(bslib)
library(ggplot2)
file <- "https://github.com/rstudio-education/shiny-course/raw/main/movies.RData"
destfile <- "movies.RData"
download.file(file, destfile)
load("movies.RData")
ui <- page_sidebar(
sidebar = sidebar(
# Select variable for y-axis
selectInput(
inputId = "y",
label = "Y-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "audience_score"
),
# Select variable for x-axis
selectInput(
inputId = "x",
label = "X-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "critics_score"
)
),
# Output: Show scatterplot
card(plotOutput(outputId = "scatterplot"))
)
server <- function(input, output, session) {
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y)) +
geom_point()
})
}
shinyApp(ui = ui, server = server)
list.of.packages <- c("RCurl")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Dados de acesso do projeto
api_token       <- '39169DDCCC39AED2489284B828E0A65A'
api_url         <- 'https://bdp.bahia.fiocruz.br/api/'
# Carregar as bilbiotecas requeridas
library(RCurl)
# Dados de acesso do projeto
api_token       <- '39169DDCCC39AED2489284B828E0A65A'
api_url         <- 'https://bdp.bahia.fiocruz.br/api/'
result <- postForm(
uri='https://redcap.chop.edu/api/',
token='SOME TEXT HERE',
content='project',
format='csv',
returnFormat='csv'
)
result <- postForm(
uri='https://bdp.bahia.fiocruz.br/api/',
token='39169DDCCC39AED2489284B828E0A65A',
content='project',
format='csv',
returnFormat='csv'
)
httr::set_config(httr::config(ssl_verifypeer=0L))
result <- postForm(
uri='https://bdp.bahia.fiocruz.br/api/',
token='39169DDCCC39AED2489284B828E0A65A',
content='project',
format='csv',
returnFormat='csv'
)
# Baixando das a partir de um report para analise em R
library(RCurl)
# Replace placeholders with your actual values
url <- "https://bdp.bahia.fiocruz.br/api/"
token <- "39169DDCCC39AED2489284B828E0A65A"
report_id <- "Tabela 1. Características dos participantes"
format <- "csv"
params <- list(
token = token,
content = "report",
report_id = report_id,
format = format
)
response <- getForm(url, .params = params)
# Write the response to a file
writeLines(response, "report_data.csv")
result <- postForm(
uri='https://bdp.bahia.fiocruz.br/api/',
token='39169DDCCC39AED2489284B828E0A65A',
content='project',
format='csv',
returnFormat='csv'
)
# Baixando dados a partir de um report de um projeto no REDCap
library(RCurl)
# Replace placeholders with your actual values
url <- "https://bdp.bahia.fiocruz.br/api/"
token <- "39169DDCCC39AED2489284B828E0A65A"
report_id <- "Tabela 1. Características dos participantes"
format <- "csv"
params <- list(
token = token,
content = "report",
report_id = report_id,
format = format
)
response <- getForm(url, .params = params)
# Write the response to a file
writeLines(response, "report_data.csv")
# Outra forma de acessar o servidor REDCap
result <- postForm(
uri='https://bdp.bahia.fiocruz.br/api/',
token='39169DDCCC39AED2489284B828E0A65A',
content='project',
format='csv',
returnFormat='csv'
)
print(result)
install.packages("geobr", dependencies = T)
library(geobr)
install.packages(c("corrplot", "cpp11", "doBy", "gtable", "pillar", "quantreg", "Rcpp", "withr"))
install.packages(c("corrplot", "cpp11", "doBy", "gtable", "pillar", "quantreg", "Rcpp", "withr"))
library(sf)
library(magrittr)
library(dplyr)
library(ggplot2)
GEOBR_DATA = list_geobr()
install.packages("geobr", dependencies = T)
library(geobr)
# Este comando abre um arquivo e importa os dados para uma tabela no R denominada data frama
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/datasets/")
df.cap <- read.csv(file="pre_pos.csv")
View(df.cap)
View(df.cap)
# Instala as biblioteca básicas para conexão API no R
install.packages(c("httr", "jsonlite"))inst
# Testa as bibliotecas
library(httr)
library(jsonlite)
# API Playground REDCap
#!/usr/bin/env Rscript
token <- "39169DDCCC39AED2489284B828E0A65A"
url <- "https://bdp.bahia.fiocruz.br/api/"
formData <- list("token"=token,
content='project',
format='json',
returnFormat='json'
)
response <- httr::POST(url, body = formData, encode = "form")
result <- httr::content(response)
print(result)
# Export records to R
install.packages("RCurl")
source('config.R')
print(result)
source('config.R')
source("config.R")
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis")
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis")
source("config.R")
library(RCurl)
result <- postForm(
api_url,
token=api_token,
content='record',
format='json',
type='flat'
)
source("config.R")
library(RCurl)
result <- postForm(
api_url,
token=api_token,
content='record',
format='json',
type='flat'
)
print(result)
# Instala as biblioteca básicas para conexão API no R
install.packages(c("httr", "jsonlite"))inst
# Testa as bibliotecas
library(httr)
library(jsonlite)
# API Playground REDCap
#!/usr/bin/env Rscript
token <- "39169DDCCC39AED2489284B828E0A65A"
url <- "https://bdp.bahia.fiocruz.br/api/"
formData <- list("token"=token,
content='project',
format='json',
returnFormat='json'
)
response <- httr::POST(url, body = formData, encode = "form")
result <- httr::content(response)
print(result)
# Export records to R
install.packages("RCurl")
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis")
install.packages("RCurl")
source("config.R")
library(RCurl)
result <- postForm(
api_url,
token=api_token,
content='record',
format='json',
type='flat'
)
# Export records to R
install.packages("RCurl")
install.packages("RCurl")
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis")
source("config.R")
library(RCurl)
result <- postForm(
api_url,
token=api_token,
content='record',
format='json',
type='flat'
)
print(result)
