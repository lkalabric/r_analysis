}
}
# Define a variavel soma
s <- 10
# Definindo a variável a que corresponde ao numero de algarismos de um numero inteiro j
a <- 2
print(paste("Soma:", s, "Numero de algaritimos: ", a))
# Possiveis algarismos
algarismos <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
# Lista de solucoes
solucoes <- c()
j_min <- 0
# Loop para criar um numero minimo formado por "a" algarismos que nao se repetem
for (j in 1:a) {
j_min <- j_min + algarismos[j]*10^(a-j)
}
print(j_min)
j_max<-0
# Loop para criar um numero maximo formado por "a" algarismos que nao se repetem
for (j in 1:a) {
j_max <- j_max + algarismos[length(algarismos)+1-j]*10^(a-j)
}
print(j_max)
n_solucoes <- 0
# Loop para testar se a soma dos algarismos de um numero j correspondem a s
for (i in j_min:j_max) {
# Convertendo o número para uma string e depois para uma lista de caracteres
j_str <- as.character(i)
j_list_char <- strsplit(j_str, "")[[1]]
# Convertendo a lista de caracteres para uma lista de números inteiros
j_list_num <- as.integer(j_list_char)
# Verificando se "0" está presente na lista
tem_zero <- any(j_list_num == 0)
# Imprimindo o resultado dos numeros validos
if (tem_zero) {
next
} else {
# Removendo elementos duplicados e comparando os comprimentos
algarismos_repetidos <- length(j_list_char) != length(unique(j_list_char))
if (algarismos_repetidos) {
next
} else {
# Calculando a soma dos elementos
soma_total <- sum(j_list_num)
if (s == soma_total) {
solucao_ordenada <- sort(j_list_num)
# Convertendo a lista em uma string, separando cada elemento por ""
string_numeros <- paste(solucao_ordenada, collapse = "")
# Convertendo a string em um número inteiro
numero_final <- as.numeric(string_numeros)
solucoes <- c(solucoes, numero_final)
# Removendo elementos duplicados e comparando os comprimentos
solucao_repetida <- length(solucoes) != length(unique(solucoes))
if (solucao_repetida) {
solucoes <- unique(solucoes)
next
} else {
n_solucoes <- n_solucoes + 1
# Imprimindo a lista final
print(paste("Solucao: ", n_solucoes))
# Imprimindo a lista final
print ("Algarismos do numero: ")
print(j_list_num)
}
}
}
}
}
# Definição do universo amostral
j_min <- algarismos[1:a]
j_min <- as.integer(j_min)
print(j_min)
# Definição do universo amostral
j_min <- algarismos[1:a]
# Colapsando as strings em uma única string
j_min <- paste(j_min, collapse = "")
# Convertendo a string de volta para um número
j_min <- as.numeric(j_min)
j_max <- rev(algarismos[(length(algarismos)-(a-1)):length(algarismos)]) # Seleciona os "a" últimos elementos do vetor algarismos
j_max <- paste(j_min, collapse = "")  # Colapsando as strings em uma única string
j_max <- as.numeric(j_min)            # Convertendo a string de volta para um número
print(j_min)
# Define a variável soma
s <- 10
# Definindo a variável a que corresponde ao numero de algarismos de um numero inteiro j
a <- 2
print(paste("Soma:", s, "Numero de algarismos: ", a))
# Possiveis algarismos
algarismos <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
# Lista de solucoes
solucoes <- c()
# Definição do universo amostral
j_min <- algarismos[1:a]              # Seleciona os "a" primeiros elementos do vetor algarismos
j_min <- paste(j_min, collapse = "")  # Colapsando as strings em uma única string
j_min <- as.numeric(j_min)            # Convertendo a string de volta para um número
print(j_min)
j_max <- rev(algarismos[(length(algarismos)-(a-1)):length(algarismos)]) # Seleciona os "a" últimos elementos do vetor algarismos
j_max <- paste(j_max, collapse = "")  # Colapsando as strings em uma única string
j_max <- as.numeric(j_max)            # Convertendo a string de volta para um número
print(j_max)
print(j_max)
n_solucoes <- 0
# Loop para testar se a soma dos algarismos de um numero j correspondem a s
for (i in j_min:j_max) {
# Convertendo o número para uma string e depois para uma lista de caracteres
j_str <- as.character(i)
j_list_char <- strsplit(j_str, "")[[1]]
# Convertendo a lista de caracteres para uma lista de números inteiros
j_list_num <- as.integer(j_list_char)
# Verificando se "0" está presente na lista
tem_zero <- any(j_list_num == 0)
# Imprimindo o resultado dos numeros validos
if (tem_zero) {
next
} else {
# Removendo elementos duplicados e comparando os comprimentos
algarismos_repetidos <- length(j_list_char) != length(unique(j_list_char))
if (algarismos_repetidos) {
next
} else {
# Calculando a soma dos elementos
soma_total <- sum(j_list_num)
if (s == soma_total) {
solucao_ordenada <- sort(j_list_num)
# Convertendo a lista em uma string, separando cada elemento por ""
string_numeros <- paste(solucao_ordenada, collapse = "")
# Convertendo a string em um número inteiro
numero_final <- as.numeric(string_numeros)
solucoes <- c(solucoes, numero_final)
# Removendo elementos duplicados e comparando os comprimentos
solucao_repetida <- length(solucoes) != length(unique(solucoes))
if (solucao_repetida) {
solucoes <- unique(solucoes)
next
} else {
n_solucoes <- n_solucoes + 1
# Imprimindo a lista final
print(paste("Solucao: ", n_solucoes))
# Imprimindo a lista final
print ("Algarismos do numero: ")
print(j_list_num)
}
}
}
}
}
# Instala as biblioteca básicas para conexão API no R
list.of.packages <- c("httr", "jsonlite")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Testa as bibliotecas
library(httr)
library(jsonlite)
setwd("C:/Users/kalab/OneDrive - FIOCRUZ/GitHub/r_analysis/redcap_analysis")
source("config.R")   # Lê api_token e api_url do projeto
# Caminho Fiocruz
setwd("C:\Users\luciano.kalabric\OneDrive - FIOCRUZ\GitHub\r_analysis")
# Caminho Fiocruz
setwd("C:/Users/luciano.kalabric/OneDrive - FIOCRUZ/GitHub/r_analysis")
source("config.R")   # Lê api_token e api_url do projeto
# Instala as biblioteca básicas para conexão API no R
list.of.packages <- c("httr", "jsonlite")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Testa as bibliotecas
library(httr)
library(jsonlite)
# Caminho Fiocruz
setwd("C:/Users/luciano.kalabric/OneDrive - FIOCRUZ/GitHub/r_analysis")
source("config.R")   # Lê api_token e api_url do projeto
# Export Project Information
formData <- list("token"=api_token,
content='project',
format='json',
returnFormat='json'
)
response <- httr::POST(api_url, body = formData, encode = "form")
project <- httr::content(response)
print(project)
# Export Records
formData <- list("token"=api_token,
content='record',
format='csv',
type='flat'
)
response <- httr::POST(api_url, body = formData, encode = "form")
result_df <- httr::content(response)
# Estatísticas descritivas dos nossos dados
table(result_df$sexo)
summary(result_df$idade)
# Instala as biblioteca básicas para conexão API no R
list.of.packages <- c("httr", "jsonlite", "ggplot2")
# Apresentando os dados num gráfico de pizza
library(ggplot2)
ggplot(result, aes(x = "", fill = sexo)) +
geom_bar(width = 1) +
coord_polar("pie") +
labs(title = "Distribuição por Sexo", fill = "Sexo")
# Apresentando os dados num gráfico de pizza
library(ggplot2)
ggplot(result_df, aes(x = "", fill = sexo)) +
geom_bar(width = 1) +
coord_polar("pie") +
labs(title = "Distribuição por Sexo", fill = "Sexo")
ggplot(result_df, aes(x="", y=frequencia, fill=sexo)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) +
labs(title="Distribuição por Sexo", fill="Sexo") +
theme_void()
View(result_df)
View(result_df)
ggplot(result_df, aes(x = "", fill = sexo)) +
geom_bar(width = 1) +
#coord_polar("pie") +
labs(title = "Distribuição por Sexo", fill = "Sexo")
View(result_df)
View(result_df)
ggplot(result_df, aes(x = "", fill = sexo)) +
geom_bar(width = 1) +
#coord_polar("pie") +
coord_polar(theta = "x", start = 0, direction = 1, clip = "on") +
labs(title = "Distribuição por Sexo", fill = "Sexo")
# Criando um novo dataframe com os rótulos
result$sexo <- factor(result$sexo, levels = c(1, 2), labels = c("Masculino", "Feminino"))
# Criando o gráfico de pizza
ggplot(result, aes(x = "", fill = sexo)) +
geom_bar(width = 1) +
coord_polar("y", start=0) +
labs(title = "Distribuição por Sexo", fill = "Sexo")
# Criando um novo dataframe com os rótulos
result$sexo <- factor(result_df$sexo, levels = c(1, 2), labels = c("Masculino", "Feminino"))
# Criando um novo dataframe com os rótulos
result_df$sexo <- factor(result_df$sexo, levels = c(1, 2), labels = c("Masculino", "Feminino"))
# Criando o gráfico de pizza
ggplot(result_df, aes(x = "", fill = sexo)) +
geom_bar(width = 1) +
coord_polar("y", start=0) +
labs(title = "Distribuição por Sexo", fill = "Sexo")
View(result_df)
# Criando um novo dataframe com os rótulos
sexo <- factor(result_df$sexo, levels = c(1, 2), labels = c("Masculino", "Feminino"))
# Criando o gráfico de pizza
ggplot(sexo) +
geom_bar(width = 1) +
coord_polar("y", start=0) +
labs(title = "Distribuição por Sexo", fill = "Sexo")
# Criando o gráfico de pizza
ggplot(sexo) +
geom_bar(width = 1) +
coord_polar("y", start=0) +
labs(title = "Distribuição por Sexo", fill = "Sexo")
# Filtrando os dados para remover os NA
sexo_filtrado <- sexo %>%
filter(!is.na(sexo))
# Criando o gráfico de pizza
ggplot(sexo) +
geom_bar(width = 1) +
coord_polar("y", start=0) +
labs(title = "Distribuição por Sexo", fill = "Sexo")
# Criando um novo dataframe com os rótulos
result_df <- factor(result_df$sexo, levels = c(1, 2), labels = c("Masculino", "Feminino"))
# Filtrando os dados para remover os NA
sexo_filtrado <- result_df %>%
filter(!is.na(sexo))
# Filtrando os dados para remover os NA
sexo_filtrado <- result_df %>%
filter(!is.na(sexo))
# Filtrando os dados para remover os NA
sexo_filtrado <- result_df$sexo %>%
filter(!is.na(sexo))
# Filtrando os dados para remover os NA
sexo_filtrado <- result_df %>%
filter(!is.na(result_df$sexo))
# Filtrando os dados para remover os NA
sexo_filtrado <- result_df$sexo %>%
filter(!is.na(result_df$sexo))
# Filtrando os dados para remover os NA
sexo_filtrado <- result_df %>%
filter(!is.na(sexo))
# Instala as biblioteca básicas para conexão API no R
list.of.packages <- c("httr", "jsonlite", "ggplot2", "dplyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(dplyr)
# Filtrando os dados para remover os NA
sexo_filtrado <- result_df %>%
filter(!is.na(sexo))
# Instala as biblioteca básicas para conexão API no R
list.of.packages <- c("httr", "jsonlite", "ggplot2", "dplyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Testa as bibliotecas
library(httr)
library(jsonlite)
# Caminho Fiocruz
setwd("C:/Users/luciano.kalabric/OneDrive - FIOCRUZ/GitHub/r_analysis")
source("config.R")   # Lê api_token e api_url do projeto
# Export Project Information
formData <- list("token"=api_token,
content='project',
format='json',
returnFormat='json'
)
response <- httr::POST(api_url, body = formData, encode = "form")
project <- httr::content(response)
print(project)
# Export Records
formData <- list("token"=api_token,
content='record',
format='csv',
type='flat'
)
response <- httr::POST(api_url, body = formData, encode = "form")
result_df <- httr::content(response)
# Estatísticas descritivas dos nossos dados
table(result_df$sexo)
summary(result_df$idade)
# Apresentando os dados num gráfico de pizza
library(ggplot2)
# Criando um novo dataframe com os rótulos
result_df <- factor(result_df$sexo, levels = c(1, 2), labels = c("Masculino", "Feminino"))
library(dplyr)
# Filtrando os dados para remover os NA
sexo_filtrado <- result_df %>%
filter(!is.na(sexo))
# Criando o gráfico de pizza
ggplot(sexo) +
geom_bar(width = 1) +
coord_polar("y", start=0) +
labs(title = "Distribuição por Sexo", fill = "Sexo")
# Criando o gráfico de pizza
ggplot(sexo_filtrado) +
geom_bar(width = 1) +
coord_polar("y", start=0) +
labs(title = "Distribuição por Sexo", fill = "Sexo")
# Filtrando os dados para remover os NA
result_filtrado <- result_df %>%
filter(!is.na(sexo))
# Criar o gráfico de pizza
ggplot(result_filtrado, aes(x = "", fill = sexo)) +
geom_bar(width = 1) +
coord_polar("y", start=0) +
labs(title = "Distribuição por Sexo", fill = "Sexo")
r
# Estatísticas descritivas dos nossos dados
table(result_df$sexo)
summary(result_df$idade)
# Export Project Information
formData <- list("token"=api_token,
content='project',
format='json',
returnFormat='json'
)
response <- httr::POST(api_url, body = formData, encode = "form")
project <- httr::content(response)
print(project)
# Export Records
formData <- list("token"=api_token,
content='record',
format='csv',
type='flat'
)
response <- httr::POST(api_url, body = formData, encode = "form")
result_df <- httr::content(response)
# Estatísticas descritivas dos nossos dados
table(result_df$sexo)
summary(result_df$idade)
# Apresentando os dados num gráfico de pizza
library(ggplot2)
# Criando um novo dataframe com os rótulos
result_df <- factor(result_df$sexo, levels = c(1, 2), labels = c("Masculino", "Feminino"))
# Export Records
formData <- list("token"=api_token,
content='record',
format='csv',
type='flat'
)
response <- httr::POST(api_url, body = formData, encode = "form")
result_df <- httr::content(response)
# Instala as biblioteca básicas para conexão API no R
list.of.packages <- c("httr", "jsonlite", "ggplot2", "dplyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Testa as bibliotecas
library(httr)
library(jsonlite)
# Caminho Fiocruz
setwd("C:/Users/luciano.kalabric/OneDrive - FIOCRUZ/GitHub/r_analysis")
source("config.R")   # Lê api_token e api_url do projeto
# Export Project Information
formData <- list("token"=api_token,
content='project',
format='json',
returnFormat='json'
)
response <- httr::POST(api_url, body = formData, encode = "form")
project <- httr::content(response)
print(project)
# Export Records
formData <- list("token"=api_token,
content='record',
format='csv',
type='flat'
)
response <- httr::POST(api_url, body = formData, encode = "form")
result_df <- httr::content(response)
# Estatísticas descritivas dos nossos dados
table(result_df$sexo)
summary(result_df$idade)
# Apresentando os dados num gráfico de pizza
library(ggplot2)
# Criando um novo dataframe com os rótulos
result_df$sexo <- factor(result_df$sexo, levels = c(1, 2), labels = c("Masculino", "Feminino"))
library(dplyr)
# Filtrando os dados para remover os NA
result_filtrado <- result_df %>%
filter(!is.na(sexo))
View(result_filtrado)
# Criar o gráfico de pizza
ggplot(result_filtrado, aes(x = "", fill = sexo)) +
geom_bar(width = 1) +
coord_polar("y", start=0) +
labs(title = "Distribuição por Sexo", fill = "Sexo")
Análise.validação.dos.métodos.moleculares.20250113.BF <- read.csv("C:/Users/luciano.kalabric/OneDrive - FIOCRUZ/GitHub/r_analysis/datasets/Análise validação dos métodos moleculares 20250113 BF.csv", header=FALSE, comment.char="#")
View(Análise.validação.dos.métodos.moleculares.20250113.BF)
Análise.validação.dos.métodos.moleculares.20250113.BF <- read.csv("C:/Users/luciano.kalabric/OneDrive - FIOCRUZ/GitHub/r_analysis/datasets/Análise validação dos métodos moleculares 20250113 BF.csv")
View(Análise.validação.dos.métodos.moleculares.20250113.BF)
# Carregando os dados de um arquivo .csv
nano1 <- read.csv("C:/Users/luciano.kalabric/OneDrive - FIOCRUZ/GitHub/r_analysis/datasets/Análise validação dos métodos moleculares 20250113 BF.csv")
# Para confirmar a classe de uma variável
view(nano1)
# Para confirmar a classe de uma variável
View(nano1)
class(tabela1)
class(nano1)
knitr::opts_chunk$set(echo = TRUE)
library(pROC)
# Instala os pacotes requeridos para o script
list.of.packages <- c("pROC", "dplyr", "readr", "ggpubr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Carrega os pacotes instalados
library(pROC)  # "dplyr" é um pacote para transformação de dados
# Carrega os pacotes instalados
library(pROC)  # Mostra e analisa curvas ROC
# Criando a curva ROC
roc_obj <- roc(nano1$resultado, nano1$a260m, levels = c("negativo", "positivo"))
# Carregando os dados de um arquivo .csv
nano1 <- read.csv("C:/Users/luciano.kalabric/OneDrive - FIOCRUZ/GitHub/r_analysis/datasets/Análise validação dos métodos moleculares 20250113 BF.csv")
# Para confirmar a classe de uma variável
View(nano1)
class(nano1)
# Carrega os pacotes instalados
library(pROC)  # Mostra e analisa curvas ROC
# Criando a curva ROC
roc_obj <- roc(nano1$controle, nano1$A260.media, levels = c("negativo", "positivo"))
# Plotando a curva ROC
plot(roc_obj, print.auc = TRUE, col = "blue")
# Calculando a área sob a curva (AUC)
auc(roc_obj)
# Plotando a curva ROC
plot(roc_obj, print.auc = TRUE, col = "blue")
# Calculando a área sob a curva (AUC)
auc(roc_obj)
# Criando a curva ROC
roc_obj <- roc(nano1$controle, nano1$A260.media, levels = c("negativo", "positivo"), smooth=TRUE)
# Plotando a curva ROC
plot(roc_obj, print.auc = TRUE, col = "blue")
# Criando a curva ROC
roc_obj <- roc(nano1$controle, nano1$A260.media, levels = c("negativo", "positivo"), smooth=TRUE, plot=TRUE, auc=TRUE)
# Criando a curva ROC
roc_obj <- roc(nano1$controle, nano1$A260.media, levels = c("negativo", "positivo"), smooth=TRUE, plot=TRUE, auc=TRUE)
# Criando a curva ROC
roc_obj <- roc(nano1$controle, nano1$A260.media, levels = c("negativo", "positivo"))
# Plotando a curva ROC
plot(roc_obj, print.auc = TRUE, col = "blue")
# Calculando a sensibilidade
ci.se(roc_obj)
# Calculando a sensibilidade
ci.se(roc_obj, specificities = seq(0, 1, .1))
# Installing and using
list.of.packages <- c("pROC", "dplyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(pROC)
# Experimental: pipelines
aSAH %>%
filter(gender == "Female") %>%
roc(outcome, s100b)
library(dplyr)
# Experimental: pipelines
aSAH %>%
filter(gender == "Female") %>%
roc(outcome, s100b)
# Installing and using
list.of.packages <- c("pROC", "dplyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(pROC)
library(dplyr)
# Experimental: pipelines
aSAH %>%
filter(gender == "Female") %>%
roc(outcome, s100b)
View(aSAH)
sm (aSAH$gender)
summary aSAH$gender
sm aSAH$gender
aSAH$gender
sm (aSAH$gender)
gender <- table(aSAH$gender)
gender
